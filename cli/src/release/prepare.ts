import { execSync } from 'child_process';
import { createCommand } from 'commander';
import { writeFile } from 'fs/promises';
import { releaseChangelog, releaseVersion } from 'nx/release';
import { isAbsolute, join } from 'path';
import { parseArgsListSplitByComma } from '../utils';
import { ReleaseDetails } from './types';

const parsePreReleaseMode = (releaseMode?: string): 'alpha' | 'beta' | 'rc' | 'prod' => {
  if (!releaseMode) {
    return 'prod';
  }

  switch (releaseMode) {
    case 'alpha':
      return 'alpha';
    case 'beta':
      return 'beta';
    case 'rc':
      return 'rc';
    default:
      throw new Error(`Invalid pre-release mode: ${releaseMode}`);
  }
};

const command = createCommand('prepare').description(
  'Handles versioning of projects and generating the changelogs.',
);

command
  .option(
    '-p, --projects <VALUE>',
    'The projects to include in the release, separated by commas. If not provided, all projects will be included.',
    parseArgsListSplitByComma,
  )
  .option('-d, --dry-run', 'Whether or not to perform a dry-run of the release process')
  .option('-v, --verbose', 'Whether or not to log verbose output')
  .option(
    '-P, --pre-release <VALUE>',
    'Specify the type of pre-release version to use (alpha, beta or rc)',
    parsePreReleaseMode,
  )
  .option(
    '-o, --release-output <TYPE>',
    'Specify where the version information of the release should be stored',
    '.release.json',
  );

command.action(async options => {
  const releaseMode = !options.preRelease ? 'prod' : options.preRelease;

  const { projectsVersionData } = await releaseVersion({
    firstRelease: true,
    dryRun: options.dryRun,
    verbose: options.verbose,
    projects: options.projects,
    specifier: releaseMode !== 'prod' ? 'prerelease' : undefined,
    preid: releaseMode !== 'prod' ? options.preRelease : undefined,
  });

  const newVersions = Object.values(projectsVersionData).filter(data => data.newVersion != null);
  if (newVersions.length === 0) {
    console.log('No new versions to commit.');

    return;
  }

  console.log('Generating changelogs...');

  // TODO: Remove this workaround when the issue is fixed in NX CLI.
  //
  // NX has a bug that is not removing dependent projects from the list of dependent projects when they are ignored.
  // This is a workaround for that issue.
  const ignoredProjects = new Set([
    'integration-tests',
    'orbit-essentials-macros-tests',
    'test_canister',
  ]);
  Object.entries(projectsVersionData).forEach(([projectName, projectVersionData]) => {
    if (projectVersionData.dependentProjects.length) {
      projectsVersionData[projectName].dependentProjects =
        projectVersionData.dependentProjects.filter(dependentProject => {
          if (dependentProject.source) {
            return !ignoredProjects.has(dependentProject.source);
          }

          return true;
        });
    }
  });

  const { projectChangelogs } = await releaseChangelog({
    versionData: projectsVersionData,
    verbose: options.verbose,
    dryRun: options.dryRun,
    projects: options.projects,
    gitCommit: true,
    gitTag: false,
    createRelease: false,
  });

  console.log('Changelogs generated.');

  if (!options.dryRun && projectChangelogs) {
    const releaseOutputPath = isAbsolute(options.releaseOutput)
      ? options.releaseOutput
      : join(__dirname, '../../..', options.releaseOutput);

    console.log(`Writing release information to ${releaseOutputPath}`);

    const releaseDetails: ReleaseDetails = {
      versions: projectsVersionData,
      changes: projectChangelogs,
    };

    await writeFile(
      releaseOutputPath,
      JSON.stringify(
        {
          __important__: 'DO NOT MODIFY THIS FILE. This file is automatically generated.',
          ...releaseDetails,
        },
        null,
        2,
      ),
      'utf-8',
    );

    execSync(`git add "${releaseOutputPath}"`);

    // Build the apps to make sure any generated files based on the new versions are included in the commit.
    execSync(`pnpm -w build && git add "${join(__dirname, '../../..')}"`);

    execSync(`git commit --amend --no-edit`);

    console.log('Release information written to file and added to release commit.');
  }
});

export default command;
