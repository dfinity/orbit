// The canister id of a wallet.
type WalletID = principal;
// The principal that is associated with an user.
type UserIdentityID = principal;
// A UUID used to identify items.
type UUID = text;
// The id of an user.
type UserId = UUID;

// Generic error type added to responses that can fail.
type ApiError = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

// The user user information.
type User = record {
  // The identity associated with the user.
  id : principal;
  // Main wallet used to show in the UI for this user.
  main_wallet : opt WalletID;
  // List of wallets associated with the user.
  wallets : vec UserWallet;
};

// The result of managing an user.
type ManageUserInput = record {
  // The main wallet to use for this user.
  //
  // If specified and the wallet is not already associated with the user it will be added.
  main_wallet : opt WalletID;
  // Manage the wallets associated with the user.
  wallets : opt vec UserWallet;
};

// The result of managing an user.
type ManageUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The updated user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The wallet information.
type UserWallet = record {
  // The id associated with the wallet.
  canister_id : WalletID;
  // The name of the wallet.
  name : opt text;
};

// The result of listing wallets.
type ListWalletsResult = variant {
  // The list of wallets.
  Ok : record {
    // The list of wallets.
    wallets : vec UserWallet;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of getting the main wallet.
type GetMainWalletResult = variant {
  // The main wallet for the given user.
  Ok : record {
    // The main wallet for the given user.
    wallet : opt UserWallet;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of getting the user information.
type GetUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for the main wallet when registering an user.
type RegisterUserWalletInput = variant {
  // Use a private wallet canister.
  PrivateWallet : record {
    // The id of the wallet canister to use.
    id : WalletID;
    // Whether or not it should also use a shared wallet for the user.
    use_shared_wallet : opt record {
      is_main : bool;
    };
  };
  // Use a shared wallet canister.
  SharedWallet;
};

// The input for registering an user.
type RegisterUserInput = record {
  // A wallet canister to use for this user.
  wallet : RegisterUserWalletInput;
};

// The result of registering an user.
type RegisterUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller newly created user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of removing the user associated with the caller.
type RemoveUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user that was removed.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of deploying a wallet canister for the caller.
type DeployWalletResult = variant {
  // Successfull operation result.
  Ok : record {
    // The wallet canister id.
    canister_id : WalletID;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The init configuration for the control panel.
type CanisterInit = variant {
  // The upgrader wasm module to use for the wallet canister.
  upgrader_wasm_module : blob;
  // The wallet wasm module to use.
  wallet_wasm_module : blob;
};

// The upgrade configuration for the control panel.
type CanisterUpgrade = variant {
  // The updated wasm canister module to use for the wallet canister.
  upgrader_wasm_module : opt blob;
  // The updated wasm canister module to use.
  wallet_wasm_module : opt blob;
};

// The install configuration for the control panel.
type CanisterInstall = variant {
  Init : CanisterInit;
  Upgrade : CanisterUpgrade;
};

type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

// The control panel service definition.
service : (opt CanisterInstall) -> {
  // Get the user information for the caller.
  get_user : () -> (GetUserResult) query;
  // Manage the user associated with the caller.
  manage_user : (input : ManageUserInput) -> (ManageUserResult);
  // Create a new user for the caller.
  register_user : (input : RegisterUserInput) -> (RegisterUserResult);
  // Delete user associated with the caller.
  delete_user : () -> (RemoveUserResult);
  // List all the wallets associated with the caller.
  list_wallets : () -> (ListWalletsResult) query;
  // Get main wallet for the caller user.
  get_main_wallet : () -> (GetMainWalletResult) query;
  // Deploys a new wallet canister for the caller.
  deploy_wallet : () -> (DeployWalletResult);

  // Metrics (Http Interface)
  http_request: (HttpRequest) -> (HttpResponse) query;
};
