// The asset symbol, e.g. "ICP" or "BTC".
type AssetSymbol = text;
// The internal wallet id used to identify a wallet in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type WalletId = text;
// The internal account id used to identify a user in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type BankAccountId = text;
// The network id, unique to the canister and associated (e.g. "icp:mainnet").
type NetworkId = text;
// An operation id used to have bank operations uniquely
// identifiable (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type OperationId = text;
// The timestamp type used in the canister.
type TimestampRFC3339 = text;
// A UUID used to identify items.
type UUID = text;

// The blockchain network to used in a transaction.
type Network = record {
  // The network id, unique to the canister and associated (e.g. "icp:mainnet").
  id : NetworkId;
  // The name of the network (e.g. "Mainnet").
  name : text;
};

// Tranders can have additional information attached to them,
// this type can be used to represent the additional info.
type TransferMetadata = record {
  // The key of the additional info (e.g. "nonce",  "tag", "memo", etc...)
  key : text;
  // The value of the additional info (e.g. "0x1234" or "my-tag")
  value : text;
};

// The status of a transfer.
type TransferStatus = variant {
  // The transfer is pending approval.
  pending;
  // The transfer has been approved.
  approved;
  // The transfer has been rejected.
  rejected : record {
    // The reason for the rejection.
    reason : text;
  };
  // The transfer has been cancelled by the initiator.
  //
  // This can happen if the initiator cancels the transfer before it is approved.
  cancelled : record {
    // The reason for the cancellation.
    reason : opt text;
  };
  // The transfer has been submitted for execution.
  submitted;
  // The transfer has been completed.
  //
  // For natively supported tokens this means that the transaction has
  // submitted to the blockchain. For non natively supported tokens this means
  // that the transaction has been signed and can be submitted by the client.
  completed : record {
    // Time at which the transaction was completed.
    completed_at : TimestampRFC3339;
    // The transaction hash, if available.
    hash : opt text;
    // The base64 encoded value of the signed transaction, if available.
    signature : opt text;
  };
};

// A record type that can be used to represent a transfer in a given wallet.
type Transfer = record {
  // The internal operation id, this a unique identifier for the transfer.
  id : OperationId;
  // The wallet id to use for the transfer.
  wallet_id : WalletId;
  // The destination address of the transaction (e.g. "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2").
  to : text;
  // The amount to transfer.
  amount : nat;
  // The status of the transfer.
  status : TransferStatus;
  // The fee to pay for the transaction, if applicable.
  fee : nat;
  // The transfer is only executed if all the policies are fulfilled before the `expiration_dt`.
  expiration_dt : TimestampRFC3339;
  // The network used when submitting the transaction to the blockchain.
  network : Network;
  // Transfers can be tagged with optional additional info (e.g. a `nonce` for Ethereum transactions).
  metadata : vec TransferMetadata;
};

// The schedule for executing a transaction of a given transfer operation.
type TransferExecutionSchedule = variant {
  // The transaction will be executed immediately.
  Immediate;
  // The transaction will be executed at a given time.
  Scheduled : record {
    // The time at which the transaction will be executed, 
    // it must be in the future.
    execution_time : TimestampRFC3339;
  };
};

// Input type for transferring funds.
type TransferInput = record {
  // The wallet id to use for the transaction.
  wallet_id : WalletId;
  // The amount to transfer.
  amount : nat;
  // The destination address of the transaction (e.g. "1BvBMSE...").
  to : text;
  // The transaction will not be created if the transfer 
  // was not approved until the `expiration_dt`.
  //
  // If not set, the system will use the default expiration time.
  expiration_dt : opt TimestampRFC3339;
  // When the transaction should be executed. 
  // 
  // If not set, the default option used by the system is `Immediate`.
  execute_at : opt TransferExecutionSchedule;
  // The fee to pay for the transaction, if applicable.
  //
  // If not set, the default fee will be used.
  fee : opt nat;
  // The network to use for the transaction, if not the
  // default network of the wallet will be used.
  network : opt Network;
  // Trasanctions can be tagged with an optional additional info
  // (e.g. a nonce in the case of an Ethereum transaction)
  metadata : opt vec TransferMetadata;
};

// Result type for transferring funds.
type TransferResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The transfer that was created.
    transfer : Transfer;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// A record type that can be used to represent a wallet in the list of wallets.
type WalletListItem = record {
  // The wallet id.
  id : WalletId;
  // The wallet address.
  address : text;
  // The wallet name.
  name : opt text;
  // The asset symbol, e.g. "ICP" or "BTC".
  asset_symbol : AssetSymbol;
  // The asset name (e.g. `Internet Computer`, `Bitcoin`, `Ethereum`, etc.)
  asset_name : opt text;
};

// Result type for listing all wallets.
type ListWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of wallets.
    wallets : vec WalletListItem;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// The role of an account in the Bank.
type BankAccountRole = variant {
  // The account is an admin of the bank.
  admin;
  // The account is a user of the bank, the guest role is also
  // used to allow operations when the bank does not have the
  // account defined.
  guest;
};

// A record type that can be used to represent an account in the bank.
type BankAccount = record {
  // The UUID of the account (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : UUID;
  // The principals associated with the account.
  identities : vec principal;
  // The role of the account.
  roles : vec BankAccountRole;
};

// A record type that can be used to represent the bank permissions.
type BankPermission = record {
  // The permission identified (e.g. "create-wallet").
  permission : text;
  // The list of roles that have the permission.
  roles : vec BankAccountRole;
};

// The settings of the bank.
type BankSettings = record {
  // The default wallet policies that are applied to all wallets.
  wallet_policies : vec WalletPolicy;
  // The list of accounts associated with the bank.
  accounts : vec BankAccount;
  // The percentage of approvals required for a bank operation to be
  // executed (e.g. upgrade the canister).
  //
  // Only admin accounts are considered for the approval threshold.
  //
  // The value must be between 0 and 100.
  approval_threshold : nat8;
  // The list of permissions that are applied to the bank.
  permissions : vec BankPermission;
};

// Result type for getting the bank settings.
type BankSettingsResult = record {
  // The result data, if the operation was successful.
  Ok : record {
    // The bank settings.
    settings : BankSettings;
  };
  // The error that occurred during the operation, if any
  // (e.g. the caller is not an admin).
  Err : Error;
};

// The status of an operation.
type OperationStatus = variant { pending; approved; rejected };

// A record type that can be used to represent an operation in the bank.
type Operation = record {
  // The operation is a transaction.
  id : OperationId;
  // The code of the operation (e.g. "transaction").
  code : text;
  // The principal that needs to approve the operation.
  account : principal;
  // The time at which the operation was created.
  created_at : TimestampRFC3339;
  // The operation approval status.
  status : OperationStatus;
  // The time at which the operation was approved or rejected.
  feedback_time_at : opt TimestampRFC3339;
  // The reason for the approval or rejection.
  feedback_reason : opt text;
};

// A record type that can be used to represent an operation in the list of operations.
type OperationListItem = record {
  // The operation id.
  id : OperationId;
  // The code of the operation (e.g. "transaction").
  code : text;
  // The time at which the operation was created.
  created_at : TimestampRFC3339;
  // The operation approval status.
  status : OperationStatus;
};

// Input type for approving or rejecting an operation.
type OperationApprovalInput = record {
  // The operation id to approve or reject.
  operation_id : OperationId;
  // If true the operation is approved, otherwise it is rejected.
  approved : bool;
  // The reason for the approval or rejection.
  reason : opt text;
};

// Result type for approving or rejecting an operation.
type OperationApprovalResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The operation that was approved or rejected.
    operation : Operation;
  };
  // The error that occurred during the operation, if any
  // (e.g. the user does not have access to the operation).
  Err : Error;
};

// The input type for getting the list of operations.
type ListOperationsInput = record {
  // The list of operation ids to retrieve.
  status : opt vec OperationStatus;
  // The code of the operation (e.g. "transaction").
  code : opt text;
};

// The result type for getting the list of operations.
type ListOperationsResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of operations.
    operations : vec OperationListItem;
  };
  // The error that occurred during the operation, if any
  // (e.g. the user does not have access to the operation).
  Err : Error;
};

// Input type for getting an operation.
type GetOperationInput = record {
  // The operation id to retrieve.
  operation_id : OperationId;
};

// Result type for getting an operation.
type GetOperationResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The operation that was retrieved.
    operation : Operation;
  };
  // The error that occurred during the operation, if any
  // (e.g. the user does not have access to the operation).
  Err : Error;
};

// todo: make sure everything above this point is correct
//
//
//
//
//
//
//
//
//
//

// Generic error type added to responses that can fail.
type Error = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

// A record type that can be used to represent a wallet in the canister.
type Wallet = record {
  // The internal wallet id.
  id : WalletId;
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  standard : text;
  // The address of the wallet (e.g. "0x1234").
  address : text;
  // A friendly name for the wallet.
  name : opt text;
  // If the list is empty, the bank owners are the only owners.
  owners : vec UUID;
  // The policies that can be used to control the wallet.
  //
  // If the list is empty but there are policies globally defined for the bank,
  // the global policies will be used.
  policies : vec WalletPolicy;
  // Metadata associated with the wallet (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : vec record { text; text };
  // The time at which the wallet was created or last modified (e.g. "2021-01-01T00:00:00Z").
  last_modification_timestamp : TimestampRFC3339;
};

type ApprovalThresholdPolicy = variant {
  // The percentage of approvals required for a transaction to be executed.
  //
  // The value must be between 0 and 100.
  VariableThreshold : nat8;

  // The number of approvals required for a transaction to be executed.
  //
  // If there are less owners than the threshold, the number of owners will be used.
  FixedThreshold : nat8;
};

// The policies that can be used to control the wallet.
type WalletPolicy = variant { approval_threshold : ApprovalThresholdPolicy };

// Input type for creating a wallet.
type CreateWalletInput = record {
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset standard that is supported (e.g. `native`, `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  standard : text;
  // The list of owners of the wallet, if the variant selected is of the Principal type, the bank canister will
  // create an account for the principal and add it to the list of owners if it does not already exist.
  //
  // If the list is empty, the caller will be the only owner.
  owners : vec variant {
    // The account id of the owner within the bank canister.
    AccountID : BankAccountId;
    // The principal that owns the wallet.
    Principal : principal;
  };
  // The policies that can be used to control the wallet.
  policies : vec WalletPolicy;
  // A friendly name for the wallet (e.g. "My Wallet").
  name : opt text;
  // Metadata associated with the wallet (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : opt vec record { text; text };
};

// Result type for creating a wallet.
type CreateWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet that was created.
    wallet : Wallet;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// Input type for getting a wallet.
type GetWalletInput = record {
  // The wallet id to retrieve.
  wallet_id : WalletId;
};

// Result type for getting a wallet.
type GetWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet that was retrieved.
    wallet : Wallet;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

type WalletBalance = record {
  // The wallet id.
  wallet_id : WalletId;
  // The balance of the wallet.
  balance : nat;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The time at which the balance was last updated.
  last_update_timestamp : TimestampRFC3339;
};

// Input type for getting a wallet balance.
type GetWalletBalanceInput = record {
  // The wallet id to retrieve.
  wallet_id : WalletId;
};

// Result type for getting a wallet.
type GetWalletBalanceResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet balance that was retrieved.
    balance : WalletBalance;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// A record type that can be used to represent an asset in the bank.
type BankAsset = record {
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  //
  // If empty, then only the native blockchain asset is supported.
  standards : vec text;
  // The asset name (e.g. `Internet Computer`, `Bitcoin`, `Ethereum`, etc.)
  name : text;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The asset metadata (e.g. `{"logo": "https://example.com/logo.png"}`),
  // also, in the case of non-native assets, it can contain other required
  // information (e.g. `{"address": "0x1234"}`).
  metadata : vec record { text; text };
};

// A record type that can be used to represent the bank features.
type BankFeatures = record {
  // The list of supported assets.
  supported_assets : vec BankAsset;
};

// Result type for getting the bank feature details.
type GetFeaturesResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The bank features.
    features : BankFeatures;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// The init configuration for the bank.
type BankInit = record {
  // The default wallet policies that are applied to all wallets.
  // wallet_policies: vec WalletPolicy;
  // The list of accounts associated with the bank.
  // accounts: vec BankAccount;
  // The percentage of approvals required for a bank operation to be
  // executed (e.g. upgrade the canister).
  //
  // Only admin accounts are considered for the approval threshold.
  //
  // The value must be between 0 and 100.
  approval_threshold : nat8;
  // The list of permissions that are applied to the bank.
  // permissions: vec BankPermission;
};

// The Bank service definition.
service : (opt BankInit) -> {
  // Get the bank features (e.g. supported assets).
  //
  // Required permission: "read:features"
  features : () -> (GetFeaturesResult) query;
  // Create a new wallet.
  //
  // Required permission: "write:create-wallet"
  create_wallet : (input : CreateWalletInput) -> (CreateWalletResult);
  // Get a wallet by id.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  get_wallet : (input : GetWalletInput) -> (GetWalletResult) query;
  // Get the wallet balance.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  get_wallet_balance : (input : GetWalletBalanceInput) -> (GetWalletBalanceResult);
  // List all wallets that the caller has access to.
  //
  // If the caller is not the owner of any wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  list_wallets : () -> (ListWalletResult) query;
  // Transfer funds from a wallet, this operation will only create a new transaction
  // if the wallet policies have been sucessfully fulfilled.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "write:transfer"
  transfer : (input : TransferInput) -> (TransferResult);

  // Get the bank settings, only available to admins.
  //
  // Required permission: "admin"
  admin_settings : () -> (BankSettingsResult) query;
  // Get the list of operations.
  list_operations : (input : ListOperationsInput) -> (ListOperationsResult) query;
  // Get the operation by id.
  get_operation : (input : GetOperationInput) -> (GetOperationResult) query;
  // Approve or reject an operation.
  operation_approval : (input : OperationApprovalInput) -> (OperationApprovalResult);
};
