// The asset symbol, e.g. "ICP" or "BTC".
type AssetSymbol = text;
// The internal wallet id used to identify a wallet in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type WalletId = text;
// The internal account id used to identify a user in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type AccountId = text;
// The network id, unique to the canister and associated (e.g. "icp:mainnet").
type NetworkId = text;
// The transfer id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type TransferId = text;
// An operation id used to have bank operations uniquely
// identifiable (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type OperationId = text;
// The timestamp type used in the canister.
type TimestampRFC3339 = text;

// The status of an operation.
type OperationStatus = variant { Pending; Adopted; Rejected; Abstained };

// A record type that can be used to represent an operation in the bank.
type Operation = record {
  // The operation id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : OperationId;
  // The code of the operation (e.g. "approve-transfer").
  code : text;
  // The account that needs to act on the operation.
  account : AccountId;
  // Wether the operation has been read or not.
  read : bool;
  // The time at which the operation was created.
  created_at : TimestampRFC3339;
  // The operation approval status.
  status : OperationStatus;
  // The time at which the operation was approved or rejected.
  feedback_time_at : opt TimestampRFC3339;
  // The reason for the approval or rejection.
  feedback_reason : opt text;
};

// A record type that can be used to represent an operation in the list of operations.
type OperationListItem = record {
  // The operation id.
  id : OperationId;
  // The code of the operation (e.g. "transaction").
  code : text;
  // The account that needs to approve the operation.
  account : AccountId;
  // The operation approval status.
  status : OperationStatus;
  // The time at which the operation was created.
  created_at : TimestampRFC3339;
};

// The input type for getting the list of operations associated with the caller.
type ListOperationsInput = record {
  // The list of operation ids to retrieve.
  status : opt OperationStatus;
  // The code of the operation (e.g. "transaction").
  code : opt text;
  // Wether the operation has been read or not.
  read : opt bool;
};

// The result type for getting the list of operations.
type ListOperationsResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of operations.
    operations : vec OperationListItem;
  };
  // The error that occurred during the operation, if any
  // (e.g. the user does not have access to the operation).
  Err : Error;
};

// The input type for getting the list of operations associated with the caller.
type ListWalletOperationsInput = record {
  // The wallet id to retrieve the operations from.
  wallet_id : WalletId;
  // The list of operation ids to retrieve.
  status : opt OperationStatus;
  // The code of the operation (e.g. "transaction").
  code : opt text;
  // Wether the operation has been read or not.
  read : opt bool;
};

// The result type for getting the list of operations for a wallet.
type ListWalletOperationsResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of operations.
    operations : vec OperationListItem;
  };
  // The error that occurred during the operation, if any
  // (e.g. the user does not have access to the operation).
  Err : Error;
};

// Input type for getting an operation.
type GetOperationInput = record {
  // The operation id to retrieve.
  operation_id : OperationId;
};

// Result type for getting an operation.
type GetOperationResult = variant {
  // The result data.
  Ok : record {
    // The operation that was retrieved.
    operation : Operation;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Input type for editing an operation.
type EditOperationInput = record {
  // The operation id to updated.
  operation_id : OperationId;
  // If true the operation is approved, otherwise it is rejected.
  approve : opt bool;
  // The reason for the approval or rejection.
  reason : opt text;
  // Set the operation as read.
  read : opt bool;
};

// Result type for editing an operation.
type EditOperationResult = variant {
  Ok : record {
    operation : Operation;
  };
  Err : Error;
};

// A record type that can be used to represent a wallet in the list of wallets.
type WalletListItem = record {
  // The wallet id.
  id : WalletId;
  // The wallet address.
  address : text;
  // The wallet name.
  name : opt text;
  // The asset symbol, e.g. "ICP" or "BTC".
  asset_symbol : AssetSymbol;
  // The asset name (e.g. `Internet Computer`, `Bitcoin`, `Ethereum`, etc.)
  asset_name : opt text;
};

// Result type for listing all wallets.
type ListWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of wallets.
    wallets : vec WalletListItem;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

type ListWalletTransfersInput = record {
  // The wallet id to retrieve.
  wallet_id : WalletId;
  // The transfer status in text format (e.g. "pending", "approved", etc.).
  status : opt text;
  // From which date to retrieve the transfers.
  from_dt : opt TimestampRFC3339;
  // Until which date to retrieve the transfers.
  to_dt : opt TimestampRFC3339;
};

type TransferListItem = record {
  // The transfer id.
  transfer_id : TransferId;
  // The destination address of the transaction (e.g. "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2").
  to : text;
  // The amount to transfer.
  amount : nat;
  // The status of the transfer.
  status : TransferStatus;
  // The time at which the transfer was created.
  created_at : TimestampRFC3339;
};

type ListWalletTransfersResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The list of transfers.
    transfers : vec TransferListItem;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// The role of an account in the Bank.
type AccountRole = variant {
  // The account is an admin of the bank.
  Admin;
  // Any authenticated account has this role.
  User;
  // The guest role is also used to allow operations when the user does not have the account defined.
  Guest;
};

// A record type that can be used to represent an account in the bank.
type Account = record {
  // The UUID of the account (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : AccountId;
  // The principals associated with the account.
  identities : vec principal;
  // The unconfirmed principals associated with the account.
  unconfirmed_identities : vec principal;
  // The role of the account.
  access_roles : vec AccountRole;
  // The time at which the account was created or last modified (e.g. "2021-01-01T00:00:00Z").
  last_modification_timestamp : TimestampRFC3339;
};

// A record type that can be used to represent the bank permissions.
type BankPermission = record {
  // The permission identified (e.g. "create-wallet").
  permission_id : text;
  // The list of roles that have the permission.
  access_roles : vec AccountRole;
};

// The blockchain network to used in a transaction.
type Network = record {
  // The network id, unique to the canister and associated (e.g. "icp:mainnet").
  id : NetworkId;
  // The name of the network (e.g. "Mainnet").
  name : text;
};

// Tranders can have additional information attached to them,
// this type can be used to represent the additional info.
type TransferMetadata = record {
  // The key of the additional info (e.g. "nonce",  "tag", "memo", etc...)
  key : text;
  // The value of the additional info (e.g. "0x1234" or "my-tag")
  value : text;
};

// The status of a transfer.
type TransferStatus = variant {
  // The transfer is pending approval.
  Pending;
  // The transfer has been approved.
  Approved;
  // The transfer has been rejected.
  Rejected : record {
    // The reason for the rejection.
    reason : text;
  };
  // The transfer has been cancelled by the initiator.
  //
  // This can happen if the initiator cancels the transfer before it is approved.
  Cancelled : record {
    // The reason for the cancellation.
    reason : opt text;
  };
  // The transfer has been submitted for execution.
  Submitted;
  // The transfer is being processed.
  Processing : record {
    // The time at which the transfer started being processed.
    started_at : TimestampRFC3339;
  };
  // The transfer has been completed.
  //
  // For natively supported tokens this means that the transaction has
  // submitted to the blockchain. For non natively supported tokens this means
  // that the transaction has been signed and can be submitted by the client.
  Completed : record {
    // Time at which the transaction was completed.
    completed_at : TimestampRFC3339;
    // The transaction hash, if available.
    hash : opt text;
    // The base64 encoded value of the signed transaction, if available.
    signature : opt text;
  };
};

// A record type that can be used to represent a transfer in a given wallet.
type Transfer = record {
  // The internal operation id, this a unique identifier for the transfer.
  id : TransferId;
  // The wallet id to use for the transfer.
  from_wallet_id : WalletId;
  // The destination address of the transaction (e.g. "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2").
  to : text;
  // The fee to pay for the transaction, if applicable.
  fee : nat;
  // The amount to transfer.
  amount : nat;
  // The status of the transfer.
  status : TransferStatus;
  // The transfer is only executed if all the policies are fulfilled before the `expiration_dt`.
  expiration_dt : TimestampRFC3339;
  // When the transaction should be executed.
  execution_plan : TransferExecutionSchedule;
  // The network used when submitting the transaction to the blockchain.
  network : Network;
  // Transfers can be tagged with optional additional info (e.g. a `nonce` for Ethereum transactions).
  metadata : vec TransferMetadata;
};

// The schedule for executing a transaction of a given transfer operation.
type TransferExecutionSchedule = variant {
  // The transaction will be executed immediately.
  Immediate;
  // The transaction will be executed at a given time.
  Scheduled : record {
    // The time at which the transaction will be executed,
    // it must be in the future.
    execution_time : TimestampRFC3339;
  };
};

// Input type for transferring funds.
type TransferInput = record {
  // The wallet id to use for the transaction.
  from_wallet_id : WalletId;
  // The amount to transfer.
  amount : nat;
  // The destination address of the transaction (e.g. "1BvBMSE...").
  to : text;
  // The transaction will not be created if the transfer
  // was not approved until the `expiration_dt`.
  //
  // If not set, the system will use the default expiration time.
  expiration_dt : opt TimestampRFC3339;
  // When the transaction should be executed.
  //
  // If not set, the default option used by the system is `Immediate`.
  execution_plan : opt TransferExecutionSchedule;
  // The fee to pay for the transaction, if applicable.
  //
  // If not set, the default fee will be used.
  fee : opt nat;
  // The network to use for the transaction, if not the
  // default network of the wallet will be used.
  network : opt Network;
  // Trasanctions can be tagged with an optional additional info
  // (e.g. a nonce in the case of an Ethereum transaction)
  metadata : opt vec TransferMetadata;
};

// Result type for transferring funds.
type TransferResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The transfer that was created.
    transfer : Transfer;
  };
  // The error that occurred during the operation.
  Err : Error;
};

type GetTransferInput = record {
  // The transfer id to retrieve.
  transfer_id : TransferId;
};

type GetTransferResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The transfer that was retrieved.
    transfer : Transfer;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Generic error type added to responses that can fail.
type Error = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

// A record type that can be used to represent a wallet in the canister.
type Wallet = record {
  // The internal wallet id.
  id : WalletId;
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  standard : text;
  // The address of the wallet (e.g. "0x1234").
  address : text;
  // A friendly name for the wallet.
  name : opt text;
  // If the list is empty, the bank owners are the only owners.
  owners : vec AccountId;
  // The policies that can be used to control the wallet.
  //
  // If the list is empty but there are policies globally defined for the bank,
  // the global policies will be used.
  policies : vec WalletPolicy;
  // Metadata associated with the wallet (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : vec record { text; text };
  // The time at which the wallet was created or last modified (e.g. "2021-01-01T00:00:00Z").
  last_modification_timestamp : TimestampRFC3339;
};

type ApprovalThresholdPolicy = variant {
  // The percentage of approvals required for a transaction to be executed.
  //
  // The value must be between 0 and 100.
  VariableThreshold : nat8;

  // The number of approvals required for a transaction to be executed.
  //
  // If there are less owners than the threshold, the number of owners will be used.
  FixedThreshold : nat8;
};

// The policies that can be used to control the wallet.
type WalletPolicy = variant { approval_threshold : ApprovalThresholdPolicy };

// Input type for creating a wallet.
type CreateWalletInput = record {
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset standard that is supported (e.g. `native`, `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  standard : text;
  // The list of owners of the wallet, if the variant selected is of the Principal type, the bank canister will
  // create an account for the principal and add it to the list of owners if it does not already exist.
  //
  // If the list is empty, the caller will be the only owner.
  owners : vec variant {
    // The account id of the owner within the bank canister.
    AccountID : AccountId;
    // The principal that owns the wallet.
    Principal : principal;
  };
  // The policies that can be used to control the wallet.
  policies : vec WalletPolicy;
  // A friendly name for the wallet (e.g. "My Wallet").
  name : opt text;
  // Metadata associated with the wallet (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : opt vec record { text; text };
};

// Result type for creating a wallet.
type CreateWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet that was created.
    wallet : Wallet;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// Input type for getting a wallet.
type GetWalletInput = record {
  // The wallet id to retrieve.
  wallet_id : WalletId;
};

// Result type for getting a wallet.
type GetWalletResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet that was retrieved.
    wallet : Wallet;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

type WalletBalance = record {
  // The wallet id.
  wallet_id : WalletId;
  // The balance of the wallet.
  balance : nat;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The time at which the balance was last updated.
  last_update_timestamp : TimestampRFC3339;
};

// Input type for getting a wallet balance.
type GetWalletBalanceInput = record {
  // The wallet id to retrieve.
  wallet_id : WalletId;
};

// Result type for getting a wallet.
type GetWalletBalanceResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The wallet balance that was retrieved.
    balance : WalletBalance;
  };
  // The error that occurred during the operation, if any.
  Err : Error;
};

// A record type that can be used to represent an asset in the bank.
type BankAsset = record {
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  //
  // If empty, then only the native blockchain asset is supported.
  standards : vec text;
  // The asset name (e.g. `Internet Computer`, `Bitcoin`, `Ethereum`, etc.)
  name : text;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The asset metadata (e.g. `{"logo": "https://example.com/logo.png"}`),
  // also, in the case of non-native assets, it can contain other required
  // information (e.g. `{"address": "0x1234"}`).
  metadata : vec record { text; text };
};

// A record type that can be used to represent the bank features.
type BankFeatures = record {
  // The list of supported assets.
  supported_assets : vec BankAsset;
};

// Result type for getting the bank feature details.
type GetFeaturesResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The bank features.
    features : BankFeatures;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// The settings of the bank.
type BankSettings = record {
  // The default wallet policies that are applied to all wallets.
  wallet_policies : vec WalletPolicy;
  // The list of admin accounts associated with the bank.
  owners : vec Account;
  // The percentage of approvals required for a bank operation to be
  // executed (e.g. upgrade the canister).
  //
  // Only admin accounts are considered for the approval threshold.
  //
  // The value must be between 0 and 100.
  approval_threshold : nat8;
  // The list of permissions that are applied to the bank.
  permissions : vec BankPermission;
  // The time at which the bank was last upgraded.
  last_upgrade_timestamp : TimestampRFC3339;
};

// Input type for retrieving an account.
type GetAccountInput = record {
  // The account id to retrieve, if not set the caller account will be used if available.
  account_id : opt AccountId;
};

// Result type for retrieving an account.
type GetAccountResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The account that was retrieved.
    account : Account;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Input type for registering an account.
type RegisterAccountInput = record {
  // The principals associated with the account.
  identities : vec principal;
};

// Result type for registering an account.
type RegisterAccountResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The account that was registered.
    account : Account;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Input type for editing an account.
type EditAccountInput = record {
  // The account id to update.
  account_id : AccountId;
  // The principals associated with the account.
  identities : opt vec principal;
};

// Result type for editing an account.
type EditAccountResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The account that was updated.
    account : Account;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Input type for confirming an account and its associated identity.
type ConfirmAccountInput = record {
  // The account id to confirm.
  account_id : AccountId;
};

// Result type for confirming an account and its associated identity.
type ConfirmAccountResult = variant {
  // The result data for a successful operation.
  Ok : record {
    // The account that was confirmed.
    account : Account;
  };
  // The error that occurred during the operation.
  Err : Error;
};

// Result type for getting the bank settings.
type BankSettingsResult = variant {
  // The result data, if the operation was successful.
  Ok : record {
    // The bank settings.
    settings : BankSettings;
  };
  // The error that occurred during the operation, if any
  // (e.g. the caller is not an admin).
  Err : Error;
};

// The init configuration for the bank.
type BankInit = record {
  // The default wallet policies that are applied to all wallets.
  wallet_policies : opt vec WalletPolicy;
  // The list of admin principals to be associated with the bank.
  owners : opt vec principal;
  // The percentage of approvals required for a bank operation to be
  // executed (e.g. upgrade the canister).
  //
  // Only admin accounts are considered for the approval threshold.
  //
  // The value must be between 0 and 100.
  approval_threshold : opt nat8;
  // The list of permissions that are applied to the bank.
  permissions : opt vec BankPermission;
};

// The Bank service definition.
service : (opt BankInit) -> {
  // Get the bank features (e.g. supported assets).
  //
  // Required permission: "read:features"
  features : () -> (GetFeaturesResult) query;
  // Create a new wallet.
  //
  // Required permission: "write:wallet"
  create_wallet : (input : CreateWalletInput) -> (CreateWalletResult);
  // Get a wallet by id.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  get_wallet : (input : GetWalletInput) -> (GetWalletResult) query;
  // Get the wallet balance.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  get_wallet_balance : (input : GetWalletBalanceInput) -> (GetWalletBalanceResult);
  // List all wallets that the caller has access to.
  //
  // If the caller is not the owner of any wallet, an error will be returned.
  //
  // Required permission: "read:wallet"
  list_wallets : () -> (ListWalletResult) query;
  // List all transfers from the requested wallet.
  //
  // Required permission: "read:transfer"
  list_wallet_transfers : (input : ListWalletTransfersInput) -> (ListWalletTransfersResult) query;
  // Transfer funds from a wallet, this operation will only create a new transaction
  // if the wallet policies have been sucessfully fulfilled.
  //
  // If the caller does not have access to the wallet, an error will be returned.
  //
  // Required permission: "write:transfer"
  transfer : (input : TransferInput) -> (TransferResult);
  // Get a transfer by id.
  //
  // If the caller does not have access to the transfer, an error will be returned.
  //
  // Required permission: "read:transfer"
  get_transfer : (input : GetTransferInput) -> (GetTransferResult) query;
  // Get the list of operations.
  //
  // Required permission: "read:operation"
  list_operations : (input : ListOperationsInput) -> (ListOperationsResult) query;
  // Get the list of operations for a given wallet.
  //
  // Required permission: "read:operation"
  list_wallet_operations : (input : ListWalletOperationsInput) -> (ListWalletOperationsResult) query;
  // Get the operation by id.
  //
  // Required permission: "read:operation"
  get_operation : (input : GetOperationInput) -> (GetOperationResult) query;
  // Approve or reject an operation.
  //
  // Required permission: "write:operation"
  edit_operation : (input : EditOperationInput) -> (EditOperationResult);
  // Register an account in the bank.
  //
  // Required permission: "write:register-account"
  register_account : (input : RegisterAccountInput) -> (RegisterAccountResult);
  // Confirm that the caller owns the account.
  //
  // Required permission: "write:register-account"
  confirm_account : (input : ConfirmAccountInput) -> (ConfirmAccountResult);
  // Edit the provided bank account.
  //
  // Required permission: "write:account"
  edit_account : (input : EditAccountInput) -> (EditAccountResult);
  // Get the account associated with the caller or the account id provided.
  //
  // Required permission: "read:account"
  get_account : (input : GetAccountInput) -> (GetAccountResult) query;
  // Get the bank settings.
  //
  // Required permission: "admin"
  bank_settings : () -> (BankSettingsResult) query;
};
