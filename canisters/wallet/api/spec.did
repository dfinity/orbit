// The asset symbol, e.g. "ICP" or "BTC".
type AssetSymbol = text;
// The internal account id used to identify a account in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type AccountId = text;
// The internal user id used to identify a user in the
// canister (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type UserId = text;
// The network id, represented by the blockchain symbol and network name (e.g. "icp:mainnet").
type NetworkId = text;
// The transfer id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type TransferId = text;
// Most ids under the wallet canister are in the UUID format (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type UUID = text;
// A proposal id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type ProposalId = text;
// The notification id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
type NotificationId = text;
// The timestamp type used in the canister.
type TimestampRFC3339 = text;

type ProposalPolicyCriteria = variant {
  AutoAdopted;
  ApprovalThreshold : record { UserSpecifier; nat16 };
  MinimumVotes : record { UserSpecifier; nat16 };
  Or : vec ProposalPolicyCriteria;
  And : vec ProposalPolicyCriteria;
  Not : ProposalPolicyCriteria;
};

type UserSpecifier = variant {
  Any;
  Id : vec UserId;
  Group : vec UUID;
  Owner;
  Proposer;
};

type EvaluationStatus = variant {
  Pending;
  Adopted;
  Rejected;
};

// Defines the various states that a notification can be in.
type NotificationStatus = variant {
  // The notification has been sent.
  Sent;
  // The notification has been read by the user.
  Read;
};

// Representsd the different types of notifications within the system.
type NotificationType = variant {
  // Notification for system-wide messages.
  // This can be used for announcements, scheduled maintenance reminders, or other important system messages.
  SystemMessage;
  // Notification for the creation of a new proposal.
  // This should be used to alert users when a new proposal that requires their attention has been created.
  ProposalCreated : record {
    // The proposal id.
    proposal_id : UUID;
  };
  // Notification for the creation of a new transfer proposal.
  // This should be used to alert users when a new transfer proposal that requires their attention has been created.
  TransferProposalCreated : record {
    proposal_id : UUID;
    account_id : UUID;
  };
  // Notification for the creation of a new account related proposal.
  //
  // This should be used to alert users when a new account related proposal that requires
  // their attention has been created.
  AccountProposalCreated : record {
    proposal_id : UUID;
    account_id : UUID;
  };
};

type NotificationTypeInput = variant {
  SystemMessage;
  ProposalCreated;
  TransferProposalCreated;
  AccountProposalCreated;
};

// A record type that can be used to represent a notification.
type Notification = record {
  // The notification id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : NotificationId;
  // The type of the notification.
  notification_type : NotificationType;
  // The notification status.
  status : NotificationStatus;
  // The user that the notification is for.
  target_user_id : UserId;
  // The notification title.
  title : record {
    // The notification title in the default locale.
    body : text;
    // The locale key that can be used to retrieve the title in the user locale.
    locale_key : text;
  };
  // The notification message.
  message : record {
    // The notification message in the default locale.
    body : text;
    // The locale key that can be used to retrieve the message in the user locale.
    locale_key : text;
  };
  // The time at which the notification was created.
  created_at : TimestampRFC3339;
};

// The input type for getting the list of notifications associated with the caller.
type ListNotificationsInput = record {
  // Show only notifications with the given status.
  status : opt NotificationStatus;
  // The type of the notification (e.g. "system-message").
  notification_type : opt NotificationTypeInput;
  // From which created time to retrieve the notifications.
  from_dt : opt TimestampRFC3339;
  // Until which created time to retrieve the notifications.
  to_dt : opt TimestampRFC3339;
};

// The result type for getting the list of notifications.
type ListNotificationsResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The list of notifications ordered by creation time (newest first).
    notifications : vec Notification;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

type MarkNotificationsReadInput = record {
  // The notifications to mark as read.
  notification_ids : vec NotificationId;
  // If true, all notifications will be marked as read.
  read : bool;
};

type MarkNotificationReadResult = variant {
  Ok;
  Err : Error;
};

// The status of a proposal.
type ProposalStatus = variant {
  Created;
  Adopted;
  Rejected;
  Cancelled : record {
    reason : opt text;
  };
  Scheduled : record {
    scheduled_at : TimestampRFC3339;
  };
  Processing : record {
    started_at : TimestampRFC3339;
  };
  Completed : record {
    completed_at : TimestampRFC3339;
  };
  Failed : record {
    reason : opt text;
  };
};

// The status code of a proposal.
type ProposalStatusCode = variant {
  Created;
  Adopted;
  Rejected;
  Cancelled;
  Scheduled;
  Processing;
  Completed;
  Failed;
};

// The status of a proposal.
type ProposalVoteStatus = variant { Accepted; Rejected };

// A record type that can be used to represent a vote on a proposal.
type ProposalVote = record {
  // The user that has taken the decision.
  user_id : UserId;
  // The user has added to the proposal, once provided it cannot be changed.
  status : ProposalVoteStatus;
  // Optional reason for the vote status.
  status_reason : opt text;
  // The time at which the vote was added.
  decided_at : TimestampRFC3339;
};

// Input type for transferring funds.
type TransferOperationInput = record {
  // The account id to use for the transaction.
  from_account_id : AccountId;
  // The amount to transfer.
  amount : nat;
  // The destination address of the transaction (e.g. "1BvBMSE...").
  to : text;
  // The fee to pay for the transaction, if applicable.
  //
  // If not set, the default fee will be used.
  fee : opt nat;
  // The network to use for the transaction, if not the
  // default network of the account will be used.
  network : opt Network;
  // Trasanctions can be tagged with an optional additional info
  // (e.g. a nonce in the case of an Ethereum transaction)
  metadata : vec TransferMetadata;
};

// Input type for transferring funds.
type TransferOperation = record {
  // The account to use for the transaction.
  from_account : Account;
  // The network to use for the transaction.
  network : Network;
  // The input to the proposal to transfer funds.
  input : TransferOperationInput;
};

// Input type for editing an account through a proposal.
type EditAccountOperationInput = record {
  // The account id that will be edited.
  account_id : AccountId;
  // The updated list of owners of the account.
  owners : opt vec UserId;
  // A friendly name for the account (e.g. "My Account").
  name : opt text;
  // The updated policies applied to the account by the account owners.
  policies : opt AccountPolicies;
};

type EditAccountOperation = record {
  // The input to the proposal to edit the account.
  input : EditAccountOperationInput;
};

// Input type for adding an account through a proposal.
type AddAccountOperationInput = record {
  // A friendly name for the account (e.g. "My Account").
  name : text;
  // The list of owners of the account.
  owners : vec UserId;
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset standard for this account (e.g. `native`, `erc20`, etc.).
  standard : text;
  // Metadata associated with the account (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : vec record { text; text };
  // The policies applied to the account by the account owners.
  policies : AccountPolicies;
};

type AddAccountOperation = record {
  // The account, only available after the proposal is executed.
  account : opt Account;
  // The input to the proposal to add the account.
  input : AddAccountOperationInput;
};

type AddUserOperationInput = record {
  // The user name (e.g. "John Doe").
  name : opt text;
  // The principals associated with the user.
  identities : vec principal;
  // The unconfirmed principals associated with the user.
  unconfirmed_identities : vec principal;
  // The list of groups the user belongs to.
  //
  // Users can be tagged with groups that can be used to control access to the wallet
  // (e.g. the UUID of the finance group).
  groups : vec UUID;
  // The status of the user (e.g. `Active`).
  //
  // The user must be active to be able to practically use the wallet.
  status : UserStatus;
};

type AddUserOperation = record {
  // The user that was added, only available after the proposal is executed.
  user : opt User;
  // The input to the proposal to add the user.
  input : AddUserOperationInput;
};

type EditUserOperationInput = record {
  // The id of the user to edit.
  id : UUID;
  // The user name (e.g. "John Doe").
  name : opt text;
  // The principals associated with the user.
  identities : opt vec principal;
  // The list of groups the user belongs to.
  //
  // Users can be tagged with groups that can be used to control access to the wallet
  // (e.g. "UUID of the finance group").
  groups : opt vec UUID;
};

type EditUserOperation = record {
  // The input to the proposal to edit the user.
  input : EditUserOperationInput;
};

type EditUserStatusOperationInput = record {
  // The id of the user to edit.
  id : UUID;
  // The status of the user (e.g. `Active`).
  //
  // The user must be active to be able to practically use the wallet.
  status : UserStatus;
};

type EditUserStatusOperation = record {
  // The input to the proposal to edit the user.
  input : EditUserStatusOperationInput;
};

type AddUserGroupOperationInput = record {
  // The name of the group.
  name : text;
};

type AddUserGroupOperation = record {
  // The user group that was added, only available after the proposal is executed.
  user_group : opt UserGroup;
  // The input to the proposal to add the user group.
  input : AddUserGroupOperationInput;
};

type EditUserGroupOperationInput = record {
  // The id of the group to edit.
  user_group_id : UUID;
  // The name of the group.
  name : text;
};

type EditUserGroupOperation = record {
  // The input to the proposal to edit the user group.
  input : EditUserGroupOperationInput;
};

type RemoveUserGroupOperationInput = record {
  // The id of the group to remove.
  user_group_id : UUID;
};

type RemoveUserGroupOperation = record {
  // The input to the proposal to remove the user group.
  input : RemoveUserGroupOperationInput;
};

type UpgradeTarget = variant {
  Wallet;
  Upgrader;
};

type UpgradeOperationInput = record {
  // The target to upgrade.
  target : UpgradeTarget;
  // The wasm module to upgrade to.
  module : blob;
  // The checksum of the wasm module.
  checksum : blob;
};

type UpgradeOperation = record {
  // The input to the proposal to upgrade a canister.
  input : UpgradeOperationInput;
};

type ProposalOperation = variant {
  // A new transfer of funds from a given account.
  Transfer : TransferOperation;
  // An operation for updating information of an account.
  EditAccount : EditAccountOperation;
  // An operation for creating a new account.
  AddAccount : AddAccountOperation;
  // An operation for adding a new user.
  AddUser : AddUserOperation;
  // An operation for editing an existing user.
  EditUser : EditUserOperation;
  // An operation for editing the status of an existing user.
  EditUserStatus : EditUserStatusOperation;
  // An operation for adding a new user group.
  AddUserGroup : AddUserGroupOperation;
  // An operation for editing an existing user group.
  EditUserGroup : EditUserGroupOperation;
  // An operation for removing an existing user group.
  RemoveUserGroup : RemoveUserGroupOperation;
  // An operation for upgrading a canister.
  Upgrade : UpgradeOperation;
};

type ProposalOperationInput = variant {
  // A new transfer of funds from a given account.
  Transfer : TransferOperationInput;
  // An operation for updating information of an account.
  EditAccount : EditAccountOperationInput;
  // An operation for adding a new account.
  AddAccount : AddAccountOperationInput;
  // An operation for adding a new user.
  AddUser : AddUserOperationInput;
  // An operation for editing an existing user.
  EditUser : EditUserOperationInput;
  // An operation for editing the status of an existing user.
  EditUserStatus : EditUserStatusOperationInput;
  // An operation for adding a new user group.
  AddUserGroup : AddUserGroupOperationInput;
  // An operation for editing an existing user group.
  EditUserGroup : EditUserGroupOperationInput;
  // An operation for removing an existing user group.
  RemoveUserGroup : RemoveUserGroupOperationInput;
  // An operation for upgrading a canister.
  Upgrade : UpgradeOperationInput;
};

type ProposalOperationType = variant {
  // A new transfer of funds from a given account.
  Transfer;
  // An operation for updating information of an account.
  EditAccount;
  // An operation for creating a new account.
  AddAccount;
  // An operation for adding a new user.
  AddUser;
  // An operation for editing an existing user.
  EditUser;
  // An operation for editing the status of an existing user.
  EditUserStatus;
  // An operation for adding a new user group.
  AddUserGroup;
  // An operation for editing an existing user group.
  EditUserGroup;
  // An operation for removing an existing user group.
  RemoveUserGroup;
  // An operation for upgrading a canister.
  Upgrade;
};

// The schedule for executing a transaction of a given transfer.
type ProposalExecutionSchedule = variant {
  // The transaction will be executed immediately.
  Immediate;
  // The transaction will be executed at a given time.
  Scheduled : record {
    // The time at which the transaction will be executed,
    // it must be in the future.
    execution_time : TimestampRFC3339;
  };
};

// A record type that can be used to represent a proposed operation in the wallet.
type Proposal = record {
  // The proposal id which is a UUID (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : ProposalId;
  // The proposal title.
  title : text;
  // The proposal summary (e.g. "This proposal will transfer 100 ICP to the account 0x1234").
  summary : opt text;
  // The operation that was proposed.
  operation : ProposalOperation;
  // The user that created the proposal.
  proposed_by : UserId;
  // The list of user votes on the proposal.
  votes : vec ProposalVote;
  // The time at which the proposal was created.
  created_at : TimestampRFC3339;
  // The proposal approval status.
  status : ProposalStatus;
  // The time at which the proposal will expire.
  expiration_dt : TimestampRFC3339;
  // The time at which the proposal should be executed if adopted.
  execution_plan : ProposalExecutionSchedule;
  // The metadata associated with the proposal.
  //
  // The metadata is a list of key-value pairs that can be used to store
  // additional information about the proposal.
  metadata : vec record { text; text };
};

// The input type for creating a proposal.
type CreateProposalInput = record {
  // The operation that was proposed.
  operation : ProposalOperationInput;
  // The proposal title (e.g. "Payment to John").
  title : opt text;
  // The proposal summary (e.g. "This proposal will transfer 100 ICP to the account 0x1234").
  summary : opt text;
  // The time at which the proposal will execute if adopted.
  execution_plan : opt ProposalExecutionSchedule;
};

// The result type for creating a proposal.
type CreateProposalResult = variant {
  Ok : record {
    proposal : Proposal;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// The input type for getting the list of proposals associated with the caller.
type ListProposalsInput = record {
  // Show only proposals with the given status.
  status : opt vec ProposalStatusCode;
  // The type of the proposal (e.g. "transfer").
  operation_type : opt ProposalOperationType;
  // From which created time to retrieve the proposals.
  from_dt : opt TimestampRFC3339;
  // Until which created time to retrieve the proposals.
  to_dt : opt TimestampRFC3339;
};

// The result type for getting the list of proposals.
type ListProposalsResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The list of proposals.
    proposals : vec Proposal;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// The input type for getting the list of proposals associated with the account.
type ListAccountProposalsInput = record {
  // The account id to retrieve the proposals from.
  account_id : AccountId;
  // Show only proposals with the given status.
  status : opt vec ProposalStatusCode;
  // The type of the proposal (e.g. "transfer").
  operation_type : opt ProposalOperationType;
  // From which created time to retrieve them.
  from_dt : opt TimestampRFC3339;
  // Until which created time to retrieve them.
  to_dt : opt TimestampRFC3339;
};

// The result type for getting the list of proposals for the given account.
type ListAccountProposalsResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The list of proposals.
    proposals : vec Proposal;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// Input type for getting a proposal.
type GetProposalInput = record {
  // The proposal id to retrieve.
  proposal_id : ProposalId;
};

// Result type for retrieving a proposal.
type GetProposalResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The proposal that was requested.
    proposal : Proposal;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// Input type for voting on a proposal.
type VoteOnProposalInput = record {
  // The proposal id to interact with.
  proposal_id : ProposalId;
  // True if the user approves the proposal, false otherwise.
  approve : bool;
  // The reason for the approval or rejection.
  reason : opt text;
};

// Result type for voting on a proposal.
type VoteOnProposalResult = variant {
  Ok : record {
    proposal : Proposal;
  };
  Err : Error;
};

// A record type that can be used to represent a account balance.
type AccountBalanceInfo = record {
  // Balance of the account.
  balance : nat;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The time at which the balance was last updated.
  last_update_timestamp : TimestampRFC3339;
};

// Result type for listing all accounts.
type ListAccountResult = variant {
  Ok : record {
    // The list of accounts.
    accounts : vec Account;
  };
  Err : Error;
};

type ListAccountTransfersInput = record {
  // The account id to retrieve.
  account_id : AccountId;
  // The transfer status in text format (e.g. "pending", "approved", etc.).
  status : opt text;
  // From which date to retrieve the transfers.
  from_dt : opt TimestampRFC3339;
  // Until which date to retrieve the transfers.
  to_dt : opt TimestampRFC3339;
};

type TransferListItem = record {
  // The transfer id.
  transfer_id : TransferId;
  // The destination address of the transaction (e.g. "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2").
  to : text;
  // The amount to transfer.
  amount : nat;
  // The status of the transfer.
  status : TransferStatus;
  // The time at which the transfer was created.
  created_at : TimestampRFC3339;
};

type ListAccountTransfersResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The list of transfers.
    transfers : vec TransferListItem;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// A record type that can be used to represent a user group in the wallet.
type UserGroup = record {
  // The UUID of the group (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : UUID;
  // The name of the group (e.g. "Finance").
  name : text;
};

type UserStatus = variant {
  // The user is active.
  Active;
  // The user is inactive.
  Inactive;
};

// A record type that can be used to represent a user in the wallet.
type User = record {
  // The UUID of the user (e.g. "d0cf5b3f-7017-4cb8-9dcf-52619c42a7b0").
  id : UserId;
  // The user name (e.g. "John Doe").
  name : opt text;
  // The status of the user (e.g. `Active`).
  status : UserStatus;
  // The list of groups the user belongs to.
  //
  // Users can be tagged with groups that can be used to control access to the wallet
  groups : vec UserGroup;
  // The principals associated with the user.
  identities : vec principal;
  // The unconfirmed principals associated with the user.
  unconfirmed_identities : vec principal;
  // The time at which the user was created or last modified (e.g. "2021-01-01T00:00:00Z").
  last_modification_timestamp : TimestampRFC3339;
};

// The blockchain network to used in a transaction.
type Network = record {
  // The network id, represented by the blockchain symbol and network name (e.g. "icp:mainnet").
  id : NetworkId;
  // The name of the network (e.g. "Mainnet").
  name : text;
};

// Tranders can have additional information attached to them,
// this type can be used to represent the additional info.
type TransferMetadata = record {
  // The key of the additional info (e.g. "nonce",  "tag", "memo", etc...)
  key : text;
  // The value of the additional info (e.g. "0x1234" or "my-tag")
  value : text;
};

// The status of a transfer.
type TransferStatus = variant {
  // The transfer is created for processing.
  Created;
  // The transfer has been failed.
  Failed : record {
    // The failure reason.
    reason : text;
  };
  // The transfer is being processed.
  Processing : record {
    // The time at which the transfer started being processed.
    started_at : TimestampRFC3339;
  };
  // The transfer has been completed.
  //
  // For natively supported tokens this means that the transaction has
  // submitted to the blockchain. For non natively supported tokens this means
  // that the transaction has been signed and can be submitted by the client.
  Completed : record {
    // Time at which the transaction was completed.
    completed_at : TimestampRFC3339;
    // The transaction hash, if available.
    hash : opt text;
    // The base64 encoded value of the signed transaction, if available.
    signature : opt text;
  };
};

// A record type that can be used to represent a transfer in a given account.
type Transfer = record {
  // The internal transfer id, this a unique identifier for the transfer.
  id : TransferId;
  // The account id to use for the transfer.
  from_account_id : AccountId;
  // The destination address of the transaction (e.g. "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2").
  to : text;
  // The fee to pay for the transaction, if applicable.
  fee : nat;
  // The amount to transfer.
  amount : nat;
  // The status of the transfer.
  status : TransferStatus;
  // The network used when submitting the transaction to the blockchain.
  network : Network;
  // Transfers can be tagged with optional additional info (e.g. a `nonce` for Ethereum transactions).
  metadata : vec TransferMetadata;
};

type GetTransferInput = record {
  // The transfer id to retrieve.
  transfer_id : TransferId;
};

type GetTransferResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The transfer that was retrieved.
    transfer : Transfer;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

type GetTransfersInput = record {
  // The list of transfer ids to retrieve.
  transfer_ids : vec TransferId;
};

type GetTransfersResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The transfer that was retrieved.
    transfers : vec Transfer;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// Generic error type added to responses that can fail.
type Error = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

// The policies applied to the account by the account owners.
type AccountPolicies = record {
  // The criterias to use for withdrawing funds from the account.
  transfer : opt ProposalPolicyCriteria;
  // The criterias to use when editing the account.
  edit : opt ProposalPolicyCriteria;
};

// A record type that can be used to represent a account in the canister.
type Account = record {
  // The internal account id.
  id : AccountId;
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  standard : text;
  // The address of the account (e.g. "0x1234").
  address : text;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // A friendly name for the account.
  name : text;
  // If the list is empty, the wallet owners are the only owners.
  owners : vec UserId;
  // Account balance when available.
  balance : opt AccountBalanceInfo;
  // The policies to enforce when interacting with the account.
  policies : AccountPolicies;
  // Metadata associated with the account (e.g. `{"contract": "0x1234", "symbol": "ANY"}`).
  metadata : vec record { text; text };
  // The time at which the account was created or last modified (e.g. "2021-01-01T00:00:00Z").
  last_modification_timestamp : TimestampRFC3339;
};

// Input type for getting a account.
type GetAccountInput = record {
  // The account id to retrieve.
  account_id : AccountId;
};

// Result type for getting a account.
type GetAccountResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The account that was retrieved.
    account : Account;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

type AccountBalance = record {
  // The account id.
  account_id : AccountId;
  // The balance of the account.
  balance : nat;
  // The number of decimals used by the asset (e.g. `8` for `BTC`, `18` for `ETH`, etc.).
  decimals : nat32;
  // The time at which the balance was last updated.
  last_update_timestamp : TimestampRFC3339;
};

// Input type for getting a account balance.
type FetchAccountBalancesInput = record {
  // The account ids to retrieve.
  account_ids : vec AccountId;
};

// Result type for getting a account.
type FetchAccountBalancesResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The account balance that was retrieved.
    balances : vec AccountBalance;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// A record type that can be used to represent an asset in the wallet.
type WalletAsset = record {
  // The blockchain identifier (e.g., `ethereum`, `bitcoin`, `icp`, etc.)
  blockchain : text;
  // The asset symbol, e.g. "ICP" or "BTC".
  symbol : AssetSymbol;
  // The asset standard that is supported (e.g. `erc20`, etc.), canonically represented as a lowercase string
  // with spaces replaced with underscores.
  //
  // If empty, then only the native blockchain asset is supported.
  standards : vec text;
  // The asset name (e.g. `Internet Computer`, `Bitcoin`, `Ethereum`, etc.)
  name : text;
  // The asset metadata (e.g. `{"logo": "https://example.com/logo.png"}`),
  // also, in the case of non-native assets, it can contain other required
  // information (e.g. `{"address": "0x1234"}`).
  metadata : vec record { text; text };
};

// A record type that can be used to represent the wallet features.
type WalletFeatures = record {
  // The list of supported assets.
  supported_assets : vec WalletAsset;
};

// Result type for getting the wallet feature details.
type GetFeaturesResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The wallet features.
    features : WalletFeatures;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// The settings of the wallet.
type WalletSettings = record {
  // The list of admin users associated with the wallet.
  owners : vec User;
  // The time at which the wallet was last upgraded.
  last_upgrade_timestamp : TimestampRFC3339;
};

// Input type for retrieving a user.
type GetUserInput = record {
  // The user id to retrieve, if not set the caller user will be used if available.
  user_id : opt UserId;
};

// Result type for retrieving a user.
type GetUserResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The user that was retrieved.
    user : User;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// Input type for confirming an user and its associated identity.
type ConfirmUserIdentityInput = record {
  // The user id to confirm.
  user_id : UserId;
};

// Result type for confirming a user and its associated identity.
type ConfirmUserIdentityResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The user that was confirmed.
    user : User;
  };
  // The error that occurred (e.g. the user does not have the necessary access rights).
  Err : Error;
};

// Result type for getting the wallet settings.
type WalletSettingsResult = variant {
  // The result data for a successful execution.
  Ok : record {
    // The wallet settings.
    settings : WalletSettings;
  };
  // The error that occurred (e.g. the caller is not an admin).
  Err : Error;
};

// The init configuration for the wallet.
type WalletInit = record {
  // The list of admin principals to be associated with the wallet.
  owners : opt vec principal;
};

// The Wallet service definition.
service : (opt WalletInit) -> {
  // Get the wallet features (e.g. supported assets).
  features : () -> (GetFeaturesResult) query;
  // Get the list of notifications associated with the caller.
  list_notifications : (input : ListNotificationsInput) -> (ListNotificationsResult) query;
  // Mark the notifications as read.
  mark_notifications_read : (input : MarkNotificationsReadInput) -> (MarkNotificationReadResult);
  // Get a account by id.
  //
  // If the caller does not have access to the account, an error will be returned.
  get_account : (input : GetAccountInput) -> (GetAccountResult) query;
  // Get the account balance.
  //
  // If the caller does not have access to the account, an error will be returned.
  fetch_account_balances : (input : FetchAccountBalancesInput) -> (FetchAccountBalancesResult);
  // List all accounts that the caller has access to.
  //
  // If the caller is not the owner of any account, an error will be returned.
  list_accounts : () -> (ListAccountResult) query;
  // List all transfers from the requested account.
  list_account_transfers : (input : ListAccountTransfersInput) -> (ListAccountTransfersResult) query;
  // Get a transfer by id.
  //
  // If the caller does not have access to the transfer, an error will be returned.
  get_transfer : (input : GetTransferInput) -> (GetTransferResult) query;
  // Get transfers by their ids.
  get_transfers : (input : GetTransfersInput) -> (GetTransfersResult) query;
  // Create a new proposal.
  //
  // The proposal will be created and the caller will be added as the proposer.
  create_proposal : (input : CreateProposalInput) -> (CreateProposalResult);
  // Get the list of proposals.
  list_proposals : (input : ListProposalsInput) -> (ListProposalsResult) query;
  // Get the list of proposals for a given account.
  list_account_proposals : (input : ListAccountProposalsInput) -> (ListAccountProposalsResult) query;
  // Get the proposal by id.
  get_proposal : (input : GetProposalInput) -> (GetProposalResult) query;
  // Record the vote of the user on the proposal.
  vote_on_proposal : (input : VoteOnProposalInput) -> (VoteOnProposalResult);
  // Confirm that the caller owns the user.
  confirm_user_identity : (input : ConfirmUserIdentityInput) -> (ConfirmUserIdentityResult);
  // Get the user associated with the caller or the user id provided.
  get_user : (input : GetUserInput) -> (GetUserResult) query;
  // Get the wallet settings.
  wallet_settings : () -> (WalletSettingsResult) query;
};
