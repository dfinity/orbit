#!/usr/bin/env bash
set -eEuo pipefail

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

#############################################
# GLOBAL VARS                               #
#############################################

MINTER_IDENTITY_NAME="minter"
WHOAMI=$(dfx identity whoami)
CANISTER_ID_CONTROL_PANEL="wdqqk-naaaa-aaaaa-774aq-cai"
CANISTER_ID_ICP_INDEX="qhbym-qaaaa-aaaaa-aaafq-cai"
CANISTER_ID_ICP_LEDGER="ryjl3-tyaaa-aaaaa-aaaba-cai"
CANISTER_ID_INTERNET_IDENTITY="rdmx6-jaaaa-aaaaa-aaadq-cai"
CANISTER_ID_UI="werw6-ayaaa-aaaaa-774aa-cai"
CANISTER_ID_WALLET="wkt3w-3iaaa-aaaaa-774ba-cai"

#############################################
# USAGE                                     #
#############################################

function title() {
  echo "Orbit development environment utils"
}

function usage() {
  cat <<EOF

Usage:
  $0

Options:
  --init configures all the dependencies for the development environment
  --init-control-panel fresh installs the control panel canister
  --init-icp-index fresh installs the icp index canister, used to query the ledger transactions
  --init-icp-ledger fresh installs the icp ledger canister, the current identity will be credited with ICP tokens
  --init-internet-identity fresh installs the internet identity canister
  --init-app-wallet fresh installs the Orbit Wallet application
  --candid-generate generates the code for the candid specifications that the Orbit applications are using
  --approve-waiting-list approves the given principal to the waiting list
EOF
}

function help() {
  cat <<EOF

Helper script to setup Orbit development environment.

NOTE: This requires a working rust toolchain, dfx and nodejs to operate correctly.
EOF
}

function exec_function() {
  local function_name=$1
  shift
  echo "------------------------------------------------------"
  echo -e "\e[1m$ START:\e[0m $function_name"
  $function_name "$@"
  echo -e "\e[1m$ COMPLETED:\e[0m $function_name"
}

# Builds the canister and generates the WASM file
function build_wasm() {
  local canister_name=$1
  local force=${USE_CACHED_WASMS:-false}

  # Check if the force flag is set to true
  if [[ "$force" == "false" ]]; then
    echo "Generating WASM file for $canister_name..."
    ./scripts/generate-wasm.sh $canister_name
  elif [ ! -f ./wasms/$canister_name.wasm.gz ]; then
    echo "WASM file for $canister_name not found, generating..."
    ./scripts/generate-wasm.sh $canister_name
  fi
}

#############################################
# SETUP                                     #
#############################################

function uninstall_icp_ledger() {
  dfx canister delete icp_ledger -y >/dev/null 2>&1 || true
}

function install_icp_ledger() {
  if [ "$MINTER_IDENTITY_NAME" == "$WHOAMI" ]; then
    echo "You can't run this script as the minter identity. Please run it as a different identity."
    exit 1
  fi

  if ! dfx identity list | grep -q $MINTER_IDENTITY_NAME; then
    dfx identity new $MINTER_IDENTITY_NAME --storage-mode plaintext
  fi

  dfx deploy --specified-id $CANISTER_ID_ICP_LEDGER icp_ledger --argument "
  (variant {
    Init = record {
      minting_account = \"$(dfx ledger account-id --identity $MINTER_IDENTITY_NAME)\";
      initial_values = vec {
        record {
          \"$(dfx ledger account-id)\";
          record {
            e8s = 1_000_000_000_000 : nat64;
          };
        };
      };
      send_whitelist = vec {};
      transfer_fee = opt record {
        e8s = 10_000 : nat64;
      };
      token_symbol = opt \"ICP\";
      token_name = opt \"Internet Computer\";
    }
  })
"
}

function setup_icp_ledger() {
  uninstall_icp_ledger
  install_icp_ledger
}

function uninstall_icp_index() {
  dfx canister delete icp_index -y >/dev/null 2>&1 || true
}

function install_icp_index() {
  dfx deploy icp_index --specified-id $CANISTER_ID_ICP_INDEX --argument "(record {ledger_id = principal \"$CANISTER_ID_ICP_LEDGER\"})"
}

function setup_icp_index() {
  uninstall_icp_index
  install_icp_index
}

function uninstall_internet_identity() {
  dfx canister delete internet_identity -y >/dev/null 2>&1 || true
}

function install_internet_identity() {
  dfx deploy --specified-id $CANISTER_ID_INTERNET_IDENTITY internet_identity
}

function setup_internet_identity() {
  uninstall_internet_identity
  install_internet_identity
}

function uninstall_control_panel() {
  dfx canister stop control_panel >/dev/null 2>&1 || true
  dfx canister delete control_panel -y >/dev/null 2>&1 || true
}

function install_control_panel() {
  # Builds the dependencies and generates the WASM files
  build_wasm upgrader
  build_wasm station

  # Read the WASM files and convert them to hex format
  upgrader_wasm_module_bytes=$(hexdump -ve '1/1 "%.2x"' ./wasms/upgrader.wasm.gz | sed 's/../\\&/g')
  station_wasm_module_bytes=$(hexdump -ve '1/1 "%.2x"' ./wasms/station.wasm.gz | sed 's/../\\&/g')

  dfx canister create --specified-id $CANISTER_ID_CONTROL_PANEL control_panel
  dfx build control_panel
  dfx canister install control_panel
  dfx canister call control_panel upload_canister_modules --argument-file <(echo "(record { upgrader_wasm_module = opt blob \"$upgrader_wasm_module_bytes\"; station_wasm_module = null; })")
  dfx canister call control_panel upload_canister_modules --argument-file <(echo "(record { upgrader_wasm_module = null; station_wasm_module = opt blob \"$station_wasm_module_bytes\"; })")
}

function setup_control_panel() {
  uninstall_control_panel
  install_control_panel
}

function upgrade_control_panel() {
  build_wasm upgrader
  build_wasm station

  # Read the WASM files and convert them to hex format
  upgrader_wasm_module_bytes=$(hexdump -ve '1/1 "%.2x"' ./wasms/upgrader.wasm.gz | sed 's/../\\&/g')
  station_wasm_module_bytes=$(hexdump -ve '1/1 "%.2x"' ./wasms/station.wasm.gz | sed 's/../\\&/g')

  dfx build control_panel
  dfx canister install control_panel --mode upgrade --yes
  dfx canister call control_panel upload_canister_modules --argument-file <(echo "(record { upgrader_wasm_module = opt blob \"$upgrader_wasm_module_bytes\"; station_wasm_module = null; })")
  dfx canister call control_panel upload_canister_modules --argument-file <(echo "(record { upgrader_wasm_module = null; station_wasm_module = opt blob \"$station_wasm_module_bytes\"; })")
}

function uninstall_app_wallet() {
  dfx canister delete app_wallet -y >/dev/null 2>&1 || true
}

function install_app_wallet() {
  BUILD_MODE=local dfx deploy --specified-id $CANISTER_ID_UI app_wallet
}

function setup_app_wallet() {
  uninstall_app_wallet
  install_app_wallet
}

function candid_generate() {
  dfx generate station
  dfx generate control_panel
  dfx generate icp_index
  dfx generate internet_identity
}

function setup_devenv() {
  . ./scripts/setup-node.sh

  if ! command -v pnpm >/dev/null 2>&1; then
    echo "pnpm not found, installing..."
    npm install -g pnpm
  fi

  pnpm install
}

function approve_waiting_list() {
  local principal=$1

  dfx canister call control_panel update_waiting_list "record { users = vec { principal \"$principal\" }; new_status = variant {Approved} }"
}

#############################################
# SCRIPT OPTIONS                            #
#############################################

if [[ $# -eq 0 ]]; then
  title
  usage
  exit 0
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
  -h | --help)
    title
    usage
    help
    exit 0
    ;;
  --approve-waiting-list)
    shift
    if [[ $# -eq 0 ]]; then
      echo "ERROR: No principal ID provided"
      exit 1
    fi
    exec_function approve_waiting_list "$1"
    shift # Remove the principal ID from the arguments
    echo
    ;;
  --init)
    shift
    exec_function setup_devenv
    exec_function setup_icp_ledger
    exec_function setup_icp_index
    exec_function setup_internet_identity
    exec_function setup_control_panel
    exec_function setup_app_wallet
    echo
    ;;
  --init-icp-ledger)
    shift
    exec_function setup_devenv
    exec_function setup_icp_ledger
    echo
    ;;
  --init-icp-index)
    shift
    exec_function setup_devenv
    exec_function setup_icp_index
    echo
    ;;
  --init-control-panel)
    shift
    exec_function setup_devenv
    exec_function setup_control_panel
    echo
    ;;
  --upgrade-control-panel)
    shift
    exec_function setup_devenv
    exec_function upgrade_control_panel
    echo
    ;;
  --init-app-wallet)
    shift
    exec_function setup_devenv
    exec_function setup_app_wallet
    echo
    ;;
  --candid-generate)
    shift
    exec_function setup_devenv
    exec_function candid_generate
    echo
    ;;
  *)
    echo "ERROR: unknown argument $1"
    usage
    echo
    echo "Use '$0 --help' for more information"
    exit 1
    ;;
  esac
done
