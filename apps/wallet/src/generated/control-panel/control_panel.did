// The canister id of a station.
type StationID = principal;
// The principal that is associated with an user.
type UserIdentityID = principal;
// A UUID used to identify items.
type UUID = text;
// The id of an user.
type UserId = UUID;
// The timestamp type used in the canister.
type TimestampRFC3339 = text;

// Generic error type added to responses that can fail.
type ApiError = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

// The user user information.
type User = record {
  // The identity associated with the user.
  identity : principal;
  // The waiting list subscription status.
  subscription_status : UserSubscriptionStatus;
  // The last time the user was active in the system.
  last_active : TimestampRFC3339;
};

// The result of setting the user active.
type SetUserActiveResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The action to perform on the stations associated with the user.
//
// This can be used to add, remove, update the stations associated with the user.
type ManageUserStationsInput = variant {
  // Add a the specified stations to the user, if the station already exists it will be updated.
  Add : vec UserStation;
  // Remove the specified stations from the user, if the station does not exist it will be ignored.
  Remove : vec StationID;
  // Update the specified stations associated with the user.
  Update : vec record {
    // The new index of the station, if the index is out of bounds it will set to the closest bound.
    index : opt nat64;
    // The stations to update, if the station does not exist it will be ignored.
    station : UserStation;
  };
};

// The result of managing the user stations.
type ManageUserStationsResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of subscribing to the waiting list.
type SubscribeToWaitingListResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

type UserSubscriptionStatus = variant {
  Unsubscribed;
  Pending;
  Approved;
  Denylisted;
};

type SubscribedUser = record {
  user_principal : principal;
  email : text;
};

type GetWaitingListResponse = record {
  subscribed_users : vec SubscribedUser;
};

type GetWaitingListResult = variant {
  // Successfull operation result.
  Ok : GetWaitingListResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

type UpdateWaitingListInput = record {
  users : vec principal;
  new_status : UserSubscriptionStatus;
};

type UpdateWaitingListResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The station information associated with the user.
type UserStation = record {
  // The id associated with the station.
  canister_id : StationID;
  // The name of the station.
  name : text;
  // The labels associated with the station.
  //
  // This can be used to store user preferences or other information related to the station such as the station type.
  //
  // Maximum of 10 labels per station and 64 characters per label.
  labels : vec text;
};

// The input for listing stations.
type ListUserStationsInput = record {
  // The labels to filter the stations by.
  //
  // All stations that have at least one of the provided labels will be returned, if no labels
  // are provided all stations will be returned.
  //
  // The match is case insensitive.
  filter_by_labels : opt vec text;
};

// The result of listing user stations.
type ListUserStationsResult = variant {
  // The list of stations.
  Ok : record {
    // The list of stations.
    stations : vec UserStation;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of getting the user information.
type GetUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for registering an user.
type RegisterUserInput = record {
  // A station canister to use for this user.
  station : opt UserStation;
};

// The result of registering an user.
type RegisterUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller newly created user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of removing the user associated with the caller.
type RemoveUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user that was removed.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of deploying a station canister for the caller.
type DeployStationResult = variant {
  // Successfull operation result.
  Ok : record {
    // The station canister id.
    canister_id : StationID;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

/// The successful result of checking if the caller can deploy a station canister.
/// Returns the remaining number of station canisters the caller can still deploy
/// or a reason why the caller cannot deploy a station canister
/// (bad subscription status or exceeded quota).
type CanDeployStationResponse = variant {
  NotAllowed : UserSubscriptionStatus;
  Allowed : nat64;
  QuotaExceeded;
};

/// The input for deploying a station admin user.
///
/// Used to associate a user with a station canister as an admin when initializing the station.
type DeployStationAdminUserInput = record {
  // The username to associate with the station canister as an admin.
  username : text;
  // The principal of the user to associate with the station canister as an admin.
  identity : principal;
};

/// The input for deploying a station canister.
type DeployStationInput = record {
  // The station name to use.
  name : text;
  // The initial admin users for the station.
  admins : vec DeployStationAdminUserInput;
  // Wether to associate the deployed station to the caller's stations.
  //
  // By default, the station is only added to the caller's stations if the caller is in the provided admins list.
  associate_with_caller : opt record {
    // The labels to associate with the station for the caller.
    labels : vec text;
  };
};

// The result of checking if the caller can deploy a station canister.
type CanDeployStationResult = variant {
  // Successfull operation result.
  Ok : CanDeployStationResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The canister modules required for the control panel.
type UploadCanisterModulesInput = record {
  // The upgrader wasm module to use for the station canister.
  upgrader_wasm_module : blob;
  // The station wasm module to use.
  station_wasm_module : blob;
};

// The result of uploading canister modules.
type UploadUploadCanisterModulesInputResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The HTTP request header field.
type HeaderField = record { text; text };

// The HTTP request.
type HttpRequest = record {
  // The HTTP method of the request (e.g. GET, POST, PUT).
  method : text;
  // The URL of the request (e.g. https://example.com).
  url : text;
  // The headers of the request.
  headers : vec HeaderField;
  // The body of the request.
  body : blob;
};

// The HTTP response.
type HttpResponse = record {
  // The status code of the response (e.g. 200, 404, 500).
  status_code : nat16;
  // The headers of the response.
  headers : vec HeaderField;
  // The body of the response.
  body : blob;
};

// The control panel service definition.
service : () -> {
  // Uploads the canister modules for the station and upgrader canisters.
  upload_canister_modules : (UploadCanisterModulesInput) -> (UploadUploadCanisterModulesInputResult);
  // Set the last active time for the user associated with the caller.
  set_user_active : () -> (SetUserActiveResult);
  // Get the user information for the caller.
  get_user : () -> (GetUserResult) query;
  // Subscribe the user associated with the caller to the waiting list.
  // Takes the user's e-mail address to which notifications can be pushed.
  subscribe_to_waiting_list : (text) -> (SubscribeToWaitingListResult);
  // Retrieves the users (principal and e-mail address) subscribed to the waiting list.
  get_waiting_list : () -> (GetWaitingListResult);
  // Updates the status of users on the waiting list.
  update_waiting_list : (input : UpdateWaitingListInput) -> (UpdateWaitingListResult);
  // Create a new user for the caller.
  register_user : (input : RegisterUserInput) -> (RegisterUserResult);
  // Delete user associated with the caller.
  delete_user : () -> (RemoveUserResult);
  // List all the stations associated with the caller.
  list_user_stations : (ListUserStationsInput) -> (ListUserStationsResult) query;
  // Manage the stations associated with the caller.
  manage_user_stations : (ManageUserStationsInput) -> (ManageUserStationsResult);
  // Deploys a new station canister for the caller.
  deploy_station : (input : DeployStationInput) -> (DeployStationResult);
  // Checks if the caller can deploy a new station canister.
  can_deploy_station : () -> (CanDeployStationResult) query;
  // HTTP Protocol interface.
  http_request : (HttpRequest) -> (HttpResponse) query;
};
