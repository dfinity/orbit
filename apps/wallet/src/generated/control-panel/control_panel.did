// The canister id of a station.
type StationID = principal;
// The principal that is associated with an user.
type UserIdentityID = principal;
// A UUID used to identify items.
type UUID = text;
// The id of an user.
type UserId = UUID;
// The timestamp type used in the canister.
type TimestampRFC3339 = text;
// The sha256 hash.
type Sha256Hex = text;

// Generic error type added to responses that can fail.
type ApiError = record {
  // Error code, added as a string to allow for custom error codes.
  code : text;
  // Error message to be displayed to the user.
  message : opt text;
  // Error details to be displayed to the user.
  details : opt vec record { text; text };
};

type PaginationInput = record {
  // The offset to use for pagination.
  offset : opt nat64;
  // The maximum number of items to retrieve.
  //
  // If not set, the default limit will be used.
  limit : opt nat16;
};

// The user user information.
type User = record {
  // The identity associated with the user.
  identity : principal;
  // The waiting list subscription status.
  subscription_status : UserSubscriptionStatus;
  // The last time the user was active in the system.
  last_active : TimestampRFC3339;
};

// The result of setting the user active.
type SetUserActiveResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The action to perform on the stations associated with the user.
//
// This can be used to add, remove, update the stations associated with the user.
type ManageUserStationsInput = variant {
  // Add a the specified stations to the user, if the station already exists it will be updated.
  Add : vec UserStation;
  // Remove the specified stations from the user, if the station does not exist it will be ignored.
  Remove : vec StationID;
  // Update the specified stations associated with the user.
  Update : vec record {
    // The new index of the station, if the index is out of bounds it will set to the closest bound.
    index : opt nat64;
    // The stations to update, if the station does not exist it will be ignored.
    station : UserStation;
  };
};

// The result of managing the user stations.
type ManageUserStationsResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of subscribing to the waiting list.
type SubscribeToWaitingListResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

type UserSubscriptionStatus = variant {
  Unsubscribed;
  Pending;
  Approved;
  Denylisted;
};

type SubscribedUser = record {
  user_principal : principal;
  email : text;
};

type GetWaitingListResponse = record {
  subscribed_users : vec SubscribedUser;
};

type GetWaitingListResult = variant {
  // Successfull operation result.
  Ok : GetWaitingListResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

type UpdateWaitingListInput = record {
  users : vec principal;
  new_status : UserSubscriptionStatus;
};

type UpdateWaitingListResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The station information associated with the user.
type UserStation = record {
  // The id associated with the station.
  canister_id : StationID;
  // The name of the station.
  name : text;
  // The labels associated with the station.
  //
  // This can be used to store user preferences or other information related to the station such as the station type.
  //
  // Maximum of 10 labels per station and 64 characters per label.
  labels : vec text;
};

// The input for listing stations.
type ListUserStationsInput = record {
  // The labels to filter the stations by.
  //
  // All stations that have at least one of the provided labels will be returned, if no labels
  // are provided all stations will be returned.
  //
  // The match is case insensitive.
  filter_by_labels : opt vec text;
};

// The result of listing user stations.
type ListUserStationsResult = variant {
  // The list of stations.
  Ok : record {
    // The list of stations.
    stations : vec UserStation;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of getting the user information.
type GetUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for registering an user.
type RegisterUserInput = record {
  // A station canister to use for this user.
  station : opt UserStation;
};

// The result of registering an user.
type RegisterUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller newly created user information.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of removing the user associated with the caller.
type RemoveUserResult = variant {
  // Successfull operation result.
  Ok : record {
    // The caller user that was removed.
    user : User;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The result of deploying a station canister for the caller.
type DeployStationResult = variant {
  // Successfull operation result.
  Ok : record {
    // The station canister id.
    canister_id : StationID;
  };
  // The error that occurred during the operation.
  Err : ApiError;
};

// The successful result of checking if the caller can deploy a station canister.
// Returns the remaining number of station canisters the caller can still deploy
// or a reason why the caller cannot deploy a station canister
// (bad subscription status or exceeded quota).
type CanDeployStationResponse = variant {
  NotAllowed : UserSubscriptionStatus;
  Allowed : nat64;
  QuotaExceeded;
};

// The input for deploying a station admin user.
//
// Used to associate a user with a station canister as an admin when initializing the station.
type DeployStationAdminUserInput = record {
  // The username to associate with the station canister as an admin.
  username : text;
  // The principal of the user to associate with the station canister as an admin.
  identity : principal;
};

type SubnetFilter = record {
  subnet_type : opt text;
};

type SubnetSelection = variant {
  // Choose a specific subnet
  Subnet : record {
    subnet : principal;
  };
  // Choose a random subnet that fulfills the specified properties
  Filter : SubnetFilter;
};

// The input for deploying a station canister.
type DeployStationInput = record {
  // The station name to use.
  name : text;
  // The initial admin users for the station.
  admins : vec DeployStationAdminUserInput;
  // Wether to associate the deployed station to the caller's stations.
  //
  // By default, the station is only added to the caller's stations if the caller is in the provided admins list.
  associate_with_caller : opt record {
    // The labels to associate with the station for the caller.
    labels : vec text;
  };
  // The subnet to which the station should be deployed.
  //
  // By default, the station is deployed to the same subnet as the control panel.
  subnet_selection : opt SubnetSelection;
};

// The result of checking if the caller can deploy a station canister.
type CanDeployStationResult = variant {
  // Successfull operation result.
  Ok : CanDeployStationResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

type WasmModuleExtraChunks = record {
  // The asset canister from which the chunks are to be retrieved.
  store_canister : principal;
  // The name of the asset containing extra chunks in the asset canister.
  extra_chunks_key : text;
  // The hash of the assembled wasm module.
  wasm_module_hash : blob;
};

// The canister modules required for the control panel.
type UploadCanisterModulesInput = record {
  // The upgrader wasm module to use for the station canister.
  upgrader_wasm_module : opt blob;
  // The station wasm module to use.
  station_wasm_module : opt blob;
  // Optional extra chunks of the station canister wasm module.
  station_wasm_module_extra_chunks : opt opt WasmModuleExtraChunks;
};

// The result of uploading canister modules.
type UploadUploadCanisterModulesInputResult = variant {
  // Successfull operation result.
  Ok;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The HTTP request header field.
type HeaderField = record { text; text };

// The HTTP request.
type HttpRequest = record {
  // The HTTP method of the request (e.g. GET, POST, PUT).
  method : text;
  // The URL of the request (e.g. https://example.com).
  url : text;
  // The headers of the request.
  headers : vec HeaderField;
  // The body of the request.
  body : blob;
};

// The HTTP response.
type HttpResponse = record {
  // The status code of the response (e.g. 200, 404, 500).
  status_code : nat16;
  // The headers of the response.
  headers : vec HeaderField;
  // The body of the response.
  body : blob;
};

// The artifact type.
type Artifact = record {
  // The id of the artifact.
  id : UUID;
  // The size of the artifact in bytes.
  size : nat64;
  // The sha256 hash of the artifact.
  hash : Sha256Hex;
  // The blob of the artifact.
  artifact : blob;
  // The timestamp when the artifact was created.
  created_at : TimestampRFC3339;
};

// The get artifact input.
type GetArtifactInput = record {
  // The id of the artifact.
  artifact_id : UUID;
};

// The get artifact response.
type GetArtifactResponse = record {
  artifact : Artifact;
};

// The get artifact result.
type GetArtifactResult = variant {
  // Successfull operation result.
  Ok : GetArtifactResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// A metadata record that contains a key and a value.
type Metadata = record {
  key : text;
  value : text;
};

// An entry record, which contains information and the value stored in the registry.
type RegistryEntry = record {
  // The UUID that identifies the entry in the registry.
  id : UUID;
  // The name of the entry, which is used to identify it (e.g. station). Names that start with `@` are considered
  // to be namespaced, and the namespace is the part of the name that comes before the `/`. Within each namespace
  // the name should refer to the same type of entry, but many entries can exist with the same name.
  //
  // e.g. if the namespace is "@orbit" and the name is "station", then all the entries will refer to a wasm module.
  //
  // Restrictions:
  //
  // - Names that start with `@` are considered namespaced.
  // - Names that start with `@` must have a namespace and a name separated by a `/`.
  // - Names must be between 2 and 48 characters long.
  // - Namespaces must be between 2 and 32 characters long.
  // - Names that are not namespaced, are put in the default namespace `@default`.
  name : text;
  // The description of the entry, which is a human-readable description of the entry.
  //
  // Restrictions:
  //
  // - Descriptions must be between 24 and 512 characters long.
  description : text;
  // The tags are used to tag the entry with specific search terms (e.g. "latest", "stable").
  //
  // Tags are grouped within the same `namespace/name` (e.g. "@orbit/station").
  //
  // Restrictions:
  //
  // - Tags must be between 2 and 32 characters long.
  // - There can be up to 10 tags per entry.
  tags : vec text;
  // The category is used to associate the entry with a specific category (e.g. "chain-fusion")
  // across all the entries in the registry.
  //
  // Restrictions:
  //
  // - Categories must be between 2 and 32 characters long.
  // - There can be up to 10 categories per entry.
  categories : vec text;
  // The metadata of the entry in the registry.
  //
  // This is a key-value map that can be used to store additional information about the entry,
  // such as the author, license, repository, docs, etc.
  //
  // Restrictions:
  //
  // - The key must be between 1 and 32 characters long.
  // - The value must be between 1 and 512 characters long.
  // - There can be up to 10 metadata entries per entry in the registry.
  metadata : vec Metadata;
  // The content of the entry in the registry.
  value : RegistryEntryValue;
  // The timestamp when the entry was created.
  created_at : TimestampRFC3339;
  // The timestamp when the entry was last updated.
  updated_at : opt TimestampRFC3339;
};

// The registry entry value.
type RegistryEntryValue = variant {
  WasmModule : WasmModuleRegistryEntryValue;
};

// The registry entry value kind.
type RegistryEntryValueKind = variant {
  WasmModule;
};

// The dependency of a wasm module.
type WasmModuleRegistryEntryDependency = record {
  // The name of the dependency.
  name : text;
  // The version of the wasm module.
  version : text;
};

// The wasm module registry value, which is the content of the wasm module and its version.
type WasmModuleRegistryEntryValue = record {
  // The id of the wasm module that is stored in the artifact repository.
  wasm_artifact_id : UUID;
  // The version of the wasm module.
  //
  // Restrictions:
  //
  // - Versions must be between 1 and 32 characters long.
  version : text;
  // The dependencies of the wasm module, which are other wasm modules that this wasm module depends on.
  //
  // This registry ids should only reference registry entries that are of type `WasmModule`, others will be ignored.
  dependencies : vec WasmModuleRegistryEntryDependency;
  // Optional extra chunks of the wasm module that are stored in an asset canister referenced in the record `WasmModuleExtraChunks`.
  module_extra_chunks : opt WasmModuleExtraChunks;
};

// The search registry filter options.
type SearchRegistryFilterKind = variant {
  // The name of the registry entry to find, if the namespace is not provided the default namespace is used.
  Name : text;
  // The namespace of the registry entry to find.
  Namespace : text;
  // The kind of registry entry to find.
  Kind : RegistryEntryValueKind;
};

type SortDirection = variant {
  Asc;
  Desc;
};

// The registry entry sort options.
type RegistryEntrySortBy = variant {
  // Sort by the timestamp when the registry entry was created.
  CreatedAt : SortDirection;
  // Sort by the version of the registry entry, if applicable.
  Version : SortDirection;
};

// The input for searching the registry.
type SearchRegistryInput = record {
  // Filters are used sequentially and are combined with an AND operation to filter the entries in the registry.
  filter_by : vec SearchRegistryFilterKind;
  // Sort the entries in the registry.
  sort_by : opt RegistryEntrySortBy;
  // The pagination options to use for the search.
  pagination : opt PaginationInput;
};

// The search registry response.
type SearchRegistryResponse = record {
  // The list of registry entries that match the search criteria.
  entries : vec RegistryEntry;
  // The total number of entries that match the search criteria.
  total : nat64;
  // The next offset to use for pagination.
  next_offset : opt nat64;
};

// The search registry result.
type SearchRegistryResult = variant {
  // Successfull operation result.
  Ok : SearchRegistryResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for getting a registry entry.
type GetRegistryEntryInput = record {
  // The id of the registry entry.
  id : UUID;
};

// The get registry entry response.
type GetRegistryEntryResponse = record {
  // The registry entry that matches the provided id.
  entry : RegistryEntry;
};

// The get registry entry result.
type GetRegistryEntryResult = variant {
  // Successfull operation result.
  Ok : GetRegistryEntryResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The registry entry input.
type RegistryEntryInput = record {
  // The name of the entry, which is used to identify it (e.g. station).
  name : text;
  // The description of the entry, which is a human-readable description of the entry.
  description : text;
  // The tags are used to tag the entry with specific search terms (e.g. "latest", "stable").
  tags : vec text;
  // The category is used to associate the entry with a specific category (e.g. "chain-fusion")
  // across all the entries in the registry.
  categories : vec text;
  // The metadata of the entry in the registry.
  metadata : vec Metadata;
  // The content of the entry in the registry.
  value : RegistryEntryValueInput;
};

// The registry entry update input.
type RegistryEntryUpdateInput = record {
  // The description of the entry, which is a human-readable description of the entry.
  description : opt text;
  // The tags are used to tag the entry with specific search terms (e.g. "latest", "stable").
  tags : opt vec text;
  // The category is used to associate the entry with a specific category (e.g. "chain-fusion")
  // across all the entries in the registry.
  categories : opt vec text;
  // The metadata of the entry in the registry.
  metadata : opt vec Metadata;
  // The content of the entry in the registry.
  value : opt RegistryEntryValueInput;
};

// The registry entry value input.
type RegistryEntryValueInput = variant {
  WasmModule : WasmModuleRegistryEntryValueInput;
};

// The wasm module registry value input, which is the content of the wasm module and its version.
type WasmModuleRegistryEntryValueInput = record {
  // The wasm module that should be stored in the artifact repository.
  wasm_module : blob;
  // The version of the wasm module.
  version : text;
  // The dependencies of the wasm module, which are other wasm modules that this wasm module depends on.
  dependencies : vec WasmModuleRegistryEntryDependency;
  // Optional extra chunks of the wasm module that are stored in an asset canister referenced in the record `WasmModuleExtraChunks`.
  module_extra_chunks : opt WasmModuleExtraChunks;
};

// The input for adding a registry entry.
type AddRegistryEntryInput = record {
  entry : RegistryEntryInput;
};

// The response of adding a registry entry.
type AddRegistryEntryResponse = record {
  entry : RegistryEntry;
};

// The result of adding a registry entry.
type AddRegistryEntryResult = variant {
  // Successfull operation result.
  Ok : AddRegistryEntryResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for editing a registry entry.
type EditRegistryEntryInput = record {
  // The id of the registry entry.
  id : UUID;
  // The updated registry entry.
  entry : RegistryEntryUpdateInput;
};

// The response of editing a registry entry.
type EditRegistryEntryResponse = record {
  entry : RegistryEntry;
};

// The result of editing a registry entry.
type EditRegistryEntryResult = variant {
  // Successfull operation result.
  Ok : EditRegistryEntryResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for deleting a registry entry.
type DeleteRegistryEntryInput = record {
  // The id of the registry entry.
  id : UUID;
};

// The response of deleting a registry entry.
type DeleteRegistryEntryResponse = record {
  // The registry entry that was deleted.
  entry : RegistryEntry;
};

// The result of deleting a registry entry.
type DeleteRegistryEntryResult = variant {
  // Successfull operation result.
  Ok : DeleteRegistryEntryResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The input for finding the next wasm module version.
type NextWasmModuleVersionInput = record {
  // The name of the registry entry.
  name : text;
  // The current version of the registry entry.
  current_version : text;
};

// The response of finding the next wasm module version.
type NextWasmModuleVersionResponse = record {
  // The registry entry that is the next version of the provided entry.
  entry : opt RegistryEntry;
};

// The result of finding the next wasm module version.
type NextWasmModuleVersionResult = variant {
  // Successfull operation result.
  Ok : NextWasmModuleVersionResponse;
  // The error that occurred during the operation.
  Err : ApiError;
};

// The control panel service definition.
service : () -> {
  // Find the next wasm module version for the provided module name and current version.
  //
  // If no next version is found, the result will be `None`.
  next_wasm_module_version : (NextWasmModuleVersionInput) -> (NextWasmModuleVersionResult) query;
  // Add a new entry to the registry.
  //
  // The caller must have the necessary permissions to add an entry to the registry.
  add_registry_entry : (AddRegistryEntryInput) -> (AddRegistryEntryResult);
  // Edit an existing entry in the registry.
  // A registry entry can only be edited if it references the same kind of value.
  //
  // The caller must have the necessary permissions to edit an entry in the registry.
  edit_registry_entry : (EditRegistryEntryInput) -> (EditRegistryEntryResult);
  // Deletes an existing entry from the registry.
  delete_registry_entry : (DeleteRegistryEntryInput) -> (DeleteRegistryEntryResult);
  // Get the registry entry by its id.
  get_registry_entry : (GetRegistryEntryInput) -> (GetRegistryEntryResult) query;
  // Search the registry for entries.
  search_registry : (SearchRegistryInput) -> (SearchRegistryResult) query;
  // Enables the caller to get an artifact by its id.
  get_artifact : (GetArtifactInput) -> (GetArtifactResult) query;
  // Uploads the canister modules for the station and upgrader canisters.
  upload_canister_modules : (UploadCanisterModulesInput) -> (UploadUploadCanisterModulesInputResult);
  // Set the last active time for the user associated with the caller.
  set_user_active : () -> (SetUserActiveResult);
  // Get the user information for the caller.
  get_user : () -> (GetUserResult) query;
  // Subscribe the user associated with the caller to the waiting list.
  // Takes the user's e-mail address to which notifications can be pushed.
  subscribe_to_waiting_list : (text) -> (SubscribeToWaitingListResult);
  // Retrieves the users (principal and e-mail address) subscribed to the waiting list.
  get_waiting_list : () -> (GetWaitingListResult);
  // Updates the status of users on the waiting list.
  update_waiting_list : (input : UpdateWaitingListInput) -> (UpdateWaitingListResult);
  // Create a new user for the caller.
  register_user : (input : RegisterUserInput) -> (RegisterUserResult);
  // Delete user associated with the caller.
  delete_user : () -> (RemoveUserResult);
  // List all the stations associated with the caller.
  list_user_stations : (ListUserStationsInput) -> (ListUserStationsResult) query;
  // Manage the stations associated with the caller.
  manage_user_stations : (ManageUserStationsInput) -> (ManageUserStationsResult);
  // Deploys a new station canister for the caller.
  deploy_station : (input : DeployStationInput) -> (DeployStationResult);
  // Checks if the caller can deploy a new station canister.
  can_deploy_station : () -> (CanDeployStationResult) query;
  // HTTP Protocol interface.
  http_request : (HttpRequest) -> (HttpResponse) query;
};
