import { resolve } from 'path';
import { STATION_API_VERSION, WALLET_VERSION } from '../core/configs.core';
import { existsSync, readFileSync, writeFileSync } from 'fs';
import { Plugin } from 'vite';
import vm from 'node:vm';

interface ApiCompatibilityFile {
  // The current version of the wallet dapp.
  version: string;
  // The compatibility of the wallet with the station API.
  api: {
    // The latest version of the station API that the wallet is using.
    latest: string;
    // The compatibility versions between the wallet and the station API.
    compatibility: Record<
      string,
      {
        ui: string[];
      }
    >;
  };
}

const loadApiCompatibilityFile = (
  filePath: string,
  windowPropKey: string,
): ApiCompatibilityFile => {
  if (existsSync(filePath)) {
    const fileContent = readFileSync(filePath, 'utf-8');
    const sandbox = vm.createContext({ window: {} });
    vm.runInContext(fileContent, sandbox);

    if (!sandbox.window?.[windowPropKey]) {
      throw new Error(
        `The window property ${windowPropKey} is not defined in the compatibility file.`,
      );
    }

    return sandbox.window[windowPropKey];
  }

  return {
    __important__:
      'This file is automatically generated by the build process. Do not modify it manually.',
    version: WALLET_VERSION,
    api: {
      latest: STATION_API_VERSION,
      compatibility: {},
    },
  } as ApiCompatibilityFile;
};

export const apiCompatibilityFile = (
  publicDir = resolve(__dirname, '../../public'),
  basePath = '/',
  filename = 'compat.js',
  windowPropKey = '__compat__',
): Plugin => {
  return {
    name: 'api-compatibility-file',
    buildStart() {
      const filePath = resolve(publicDir, filename);
      const configuration = loadApiCompatibilityFile(filePath, windowPropKey);

      // Remove the current wallet version from the compat_apis if it exists.
      for (const key of Object.keys(configuration.api.compatibility)) {
        if (configuration.api.compatibility?.[key]?.['ui'].includes(WALLET_VERSION)) {
          configuration.api.compatibility[key].ui = configuration.api.compatibility[key].ui.filter(
            (version: string) => version !== WALLET_VERSION,
          );
        }

        // Remove the key if there are no UI versions compatible with it.
        if (configuration.api.compatibility?.[key]?.ui?.length === 0) {
          delete configuration.api.compatibility[key];
        }
      }

      const currentCompatibility = configuration.api.compatibility?.[STATION_API_VERSION] ?? {
        ui: [],
      };

      // The removal is to ensure that the current version is not duplicated and is always at the top.
      if (configuration.api.compatibility[STATION_API_VERSION]) {
        delete configuration.api.compatibility[STATION_API_VERSION];
      }

      // Mark the current wallet version as compatible with the current station API version.
      configuration.api.compatibility = {
        [STATION_API_VERSION]: {
          ui: [WALLET_VERSION, ...currentCompatibility.ui],
        },
        ...configuration.api.compatibility,
      };

      writeFileSync(
        filePath,
        `window.${windowPropKey} = ${JSON.stringify(configuration, null, 2)}`,
        {
          encoding: 'utf-8',
        },
      );
    },
    transformIndexHtml(html) {
      return {
        html,
        tags: [
          {
            tag: 'script',
            attrs: {
              src: `${basePath}${filename}`,
              type: 'module',
              crossorigin: true,
              'data-versioned-path': true,
            },
            injectTo: 'head-prepend',
          },
        ],
      };
    },
  };
};
