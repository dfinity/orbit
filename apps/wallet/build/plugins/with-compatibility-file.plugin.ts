import { existsSync, readFileSync, writeFileSync } from 'fs';
import { resolve } from 'path';
import { Plugin } from 'vite';
import { STATION_API_VERSION, WALLET_VERSION } from '../core/configs.core';
import { compareSemanticVersions } from '../utils/sort.utils';
import { ApiCompatibilityInfo } from '../types/compat.types';

const loadApiCompatibilityFile = (filePath: string): ApiCompatibilityInfo => {
  if (existsSync(filePath)) {
    return JSON.parse(readFileSync(filePath, 'utf-8'));
  }

  return {
    __important__:
      'This file is automatically generated by the build process. Do not modify it manually.',
    version: WALLET_VERSION,
    api: {
      latest: STATION_API_VERSION,
      compatibility: {
        [STATION_API_VERSION]: {
          ui: [WALLET_VERSION],
        },
        // for backward compatibility with older versions of the station canister we also hardcode them here,
        // this only affects for the very first time while the compat.json file is not created yet.
        '0.0.2-alpha.1': { ui: [WALLET_VERSION] },
        '0.0.2-alpha.0': { ui: [WALLET_VERSION] },
      },
    },
  } as ApiCompatibilityInfo;
};

export const withApiCompatibilityFile = (
  publicDir = resolve(__dirname, '../../public'),
  filename = 'compat.json',
): Plugin => {
  return {
    name: 'api-compatibility-file',
    buildStart() {
      const filePath = resolve(publicDir, filename);
      const configuration = loadApiCompatibilityFile(filePath);

      // Set the latest station API and ui versions.
      configuration.version = WALLET_VERSION;
      configuration.api.latest = STATION_API_VERSION;

      // Cleanup the existing file if there are entries that are not compatible with UIs.
      for (const key of Object.keys(configuration.api.compatibility)) {
        // Remove the key if there are no UI versions compatible with it.
        if (configuration.api.compatibility?.[key]?.ui?.length === 0) {
          delete configuration.api.compatibility[key];
        }
      }

      const currentCompatibility = configuration.api.compatibility?.[STATION_API_VERSION] ?? {
        ui: [],
      };

      // The removal is to ensure that the current version is not duplicated and is always at the top.
      if (configuration.api.compatibility[STATION_API_VERSION]) {
        delete configuration.api.compatibility[STATION_API_VERSION];
      }

      // Mark the current wallet version as compatible with the current station API version.
      configuration.api.compatibility = {
        [STATION_API_VERSION]: {
          ui: Array.from(new Set([WALLET_VERSION, ...currentCompatibility.ui])).sort(
            compareSemanticVersions(),
          ),
        },
        ...configuration.api.compatibility,
      };

      // sorts the station api versions in descending order.
      configuration.api.compatibility = Object.keys(configuration.api.compatibility)
        .sort(compareSemanticVersions())
        .reduce(
          (acc, key) => {
            acc[key] = configuration.api.compatibility[key];
            return acc;
          },
          {} as Record<string, { ui: string[] }>,
        );

      writeFileSync(filePath, JSON.stringify(configuration, null, 2), {
        encoding: 'utf-8',
      });
    },
  };
};
